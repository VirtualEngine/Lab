<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="757" errors="0" failures="6" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2016-10-20" time="00:19:02">
  <environment user="Ryan" machine-name="LENOVO-10" cwd="GitHub:\kilasuit\Lability" user-domain="LENOVO-10" platform="Microsoft Windows 10 Pro Insider Preview|C:\WINDOWS|\Device\Harddisk0\Partition5" nunit-version="2.5.8.0" os-version="10.0.14946" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-GB" current-uiculture="en-US" />
  <test-suite type="Powershell" name="Pester" executed="True" result="Failure" success="False" time="355.6951" asserts="0">
    <results>
      <test-suite type="TestFixture" name="Testing Private Function  - AddDiskImageHotfix for Standard Processing" executed="True" result="Success" success="True" time="1.8754" asserts="0" description="Testing Private Function  - AddDiskImageHotfix for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - AddDiskImageHotfix for Standard Processing.Is valid Powershell (Has no script errors)" time="1.8754" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - AddDiskImagePackage for Standard Processing" executed="True" result="Success" success="True" time="0.0583" asserts="0" description="Testing Private Function  - AddDiskImagePackage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - AddDiskImagePackage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0583" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - AddWindowsOptionalFeature for Standard Processing" executed="True" result="Success" success="True" time="0.0624" asserts="0" description="Testing Private Function  - AddWindowsOptionalFeature for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - AddWindowsOptionalFeature for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0624" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - AddWindowsPackage for Standard Processing" executed="True" result="Success" success="True" time="0.0758" asserts="0" description="Testing Private Function  - AddWindowsPackage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - AddWindowsPackage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0758" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - CloseGitHubZipArchive for Standard Processing" executed="True" result="Success" success="True" time="0.0625" asserts="0" description="Testing Private Function  - CloseGitHubZipArchive for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - CloseGitHubZipArchive for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0625" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - CloseZipArchive for Standard Processing" executed="True" result="Success" success="True" time="0.0875" asserts="0" description="Testing Private Function  - CloseZipArchive for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - CloseZipArchive for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0875" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ConvertPSObjectToHashtable for Standard Processing" executed="True" result="Success" success="True" time="0.0695" asserts="0" description="Testing Private Function  - ConvertPSObjectToHashtable for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ConvertPSObjectToHashtable for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ConvertToConfigurationData for Standard Processing" executed="True" result="Success" success="True" time="0.0772" asserts="0" description="Testing Private Function  - ConvertToConfigurationData for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ConvertToConfigurationData for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0772" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - CopyDirectory for Standard Processing" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="Testing Private Function  - CopyDirectory for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - CopyDirectory for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandDscModule for Standard Processing" executed="True" result="Success" success="True" time="0.0565" asserts="0" description="Testing Private Function  - ExpandDscModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandDscModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0565" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandGitHubZipArchive for Standard Processing" executed="True" result="Success" success="True" time="0.0548" asserts="0" description="Testing Private Function  - ExpandGitHubZipArchive for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandGitHubZipArchive for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandGitHubZipArchiveItem for Standard Processing" executed="True" result="Success" success="True" time="0.0616" asserts="0" description="Testing Private Function  - ExpandGitHubZipArchiveItem for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandGitHubZipArchiveItem for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0616" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandIso for Standard Processing" executed="True" result="Success" success="True" time="0.0725" asserts="0" description="Testing Private Function  - ExpandIso for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandIso for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0725" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandLabResource for Standard Processing" executed="True" result="Success" success="True" time="0.0618" asserts="0" description="Testing Private Function  - ExpandLabResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandLabResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0618" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandModuleCache for Standard Processing" executed="True" result="Success" success="True" time="0.053" asserts="0" description="Testing Private Function  - ExpandModuleCache for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandModuleCache for Standard Processing.Is valid Powershell (Has no script errors)" time="0.053" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandWindowsImage for Standard Processing" executed="True" result="Success" success="True" time="0.0652" asserts="0" description="Testing Private Function  - ExpandWindowsImage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandWindowsImage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandZipArchive for Standard Processing" executed="True" result="Success" success="True" time="0.0685" asserts="0" description="Testing Private Function  - ExpandZipArchive for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandZipArchive for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0685" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ExpandZipArchiveItem for Standard Processing" executed="True" result="Success" success="True" time="0.0737" asserts="0" description="Testing Private Function  - ExpandZipArchiveItem for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ExpandZipArchiveItem for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0737" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetConfigurationData for Standard Processing" executed="True" result="Success" success="True" time="0.11" asserts="0" description="Testing Private Function  - GetConfigurationData for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetConfigurationData for Standard Processing.Is valid Powershell (Has no script errors)" time="0.11" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetDiskImageDriveLetter for Standard Processing" executed="True" result="Success" success="True" time="0.0914" asserts="0" description="Testing Private Function  - GetDiskImageDriveLetter for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetDiskImageDriveLetter for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0914" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetDscModule for Standard Processing" executed="True" result="Success" success="True" time="0.0734" asserts="0" description="Testing Private Function  - GetDscModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetDscModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0734" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetDscResource for Standard Processing" executed="True" result="Success" success="True" time="0.1201" asserts="0" description="Testing Private Function  - GetDscResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetDscResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.1201" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetDscResourceModule for Standard Processing" executed="True" result="Success" success="True" time="0.0844" asserts="0" description="Testing Private Function  - GetDscResourceModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetDscResourceModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0844" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetFormattedMessage for Standard Processing" executed="True" result="Success" success="True" time="0.1018" asserts="0" description="Testing Private Function  - GetFormattedMessage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetFormattedMessage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.1018" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetLabHostDSCConfigurationPath for Standard Processing" executed="True" result="Success" success="True" time="0.0529" asserts="0" description="Testing Private Function  - GetLabHostDSCConfigurationPath for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetLabHostDSCConfigurationPath for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetLabHostSetupConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0549" asserts="0" description="Testing Private Function  - GetLabHostSetupConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetLabHostSetupConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetLabVMDisk for Standard Processing" executed="True" result="Success" success="True" time="0.0575" asserts="0" description="Testing Private Function  - GetLabVMDisk for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetLabVMDisk for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0575" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetLabVMSnapshot for Standard Processing" executed="True" result="Success" success="True" time="0.0549" asserts="0" description="Testing Private Function  - GetLabVMSnapshot for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetLabVMSnapshot for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetModule for Standard Processing" executed="True" result="Success" success="True" time="0.0603" asserts="0" description="Testing Private Function  - GetModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0603" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetModuleCache for Standard Processing" executed="True" result="Success" success="True" time="0.06" asserts="0" description="Testing Private Function  - GetModuleCache for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetModuleCache for Standard Processing.Is valid Powershell (Has no script errors)" time="0.06" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetModuleCacheManifest for Standard Processing" executed="True" result="Success" success="True" time="0.0576" asserts="0" description="Testing Private Function  - GetModuleCacheManifest for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetModuleCacheManifest for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0576" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetResourceDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0616" asserts="0" description="Testing Private Function  - GetResourceDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetResourceDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0616" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetVirtualMachineProperties for Standard Processing" executed="True" result="Success" success="True" time="0.0634" asserts="0" description="Testing Private Function  - GetVirtualMachineProperties for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetVirtualMachineProperties for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0634" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetWindowsImageIndex for Standard Processing" executed="True" result="Success" success="True" time="0.0749" asserts="0" description="Testing Private Function  - GetWindowsImageIndex for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetWindowsImageIndex for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0749" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - GetWindowsImageName for Standard Processing" executed="True" result="Success" success="True" time="0.0637" asserts="0" description="Testing Private Function  - GetWindowsImageName for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - GetWindowsImageName for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0637" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ImportDismModule for Standard Processing" executed="True" result="Success" success="True" time="0.0655" asserts="0" description="Testing Private Function  - ImportDismModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ImportDismModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0655" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ImportDscResource for Standard Processing" executed="True" result="Success" success="True" time="0.0534" asserts="0" description="Testing Private Function  - ImportDscResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ImportDscResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeDscResource for Standard Processing" executed="True" result="Success" success="True" time="0.0672" asserts="0" description="Testing Private Function  - InvokeDscResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeDscResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0672" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeExecutable for Standard Processing" executed="True" result="Success" success="True" time="0.0683" asserts="0" description="Testing Private Function  - InvokeExecutable for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeExecutable for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0683" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeLabMediaHotfixDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0648" asserts="0" description="Testing Private Function  - InvokeLabMediaHotfixDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeLabMediaHotfixDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0648" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeLabMediaImageDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0598" asserts="0" description="Testing Private Function  - InvokeLabMediaImageDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeLabMediaImageDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0598" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeModuleCacheDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0593" asserts="0" description="Testing Private Function  - InvokeModuleCacheDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeModuleCacheDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0593" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeModuleDownloadFromGitHub for Standard Processing" executed="True" result="Success" success="True" time="0.0611" asserts="0" description="Testing Private Function  - InvokeModuleDownloadFromGitHub for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeModuleDownloadFromGitHub for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeModuleDownloadFromPSGallery for Standard Processing" executed="True" result="Success" success="True" time="0.0646" asserts="0" description="Testing Private Function  - InvokeModuleDownloadFromPSGallery for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeModuleDownloadFromPSGallery for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0646" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeResourceDownload for Standard Processing" executed="True" result="Success" success="True" time="0.054" asserts="0" description="Testing Private Function  - InvokeResourceDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeResourceDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.054" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - InvokeWebClientDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0574" asserts="0" description="Testing Private Function  - InvokeWebClientDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - InvokeWebClientDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0574" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewBootStrap for Standard Processing" executed="True" result="Success" success="True" time="0.085" asserts="0" description="Testing Private Function  - NewBootStrap for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewBootStrap for Standard Processing.Is valid Powershell (Has no script errors)" time="0.085" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewDirectory for Standard Processing" executed="True" result="Success" success="True" time="0.0565" asserts="0" description="Testing Private Function  - NewDirectory for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewDirectory for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0565" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewDiskImage for Standard Processing" executed="True" result="Success" success="True" time="0.0509" asserts="0" description="Testing Private Function  - NewDiskImage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewDiskImage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0509" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewDiskImageGpt for Standard Processing" executed="True" result="Success" success="True" time="0.0651" asserts="0" description="Testing Private Function  - NewDiskImageGpt for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewDiskImageGpt for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewDiskImageMbr for Standard Processing" executed="True" result="Success" success="True" time="0.0566" asserts="0" description="Testing Private Function  - NewDiskImageMbr for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewDiskImageMbr for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewDiskPartFat32Partition for Standard Processing" executed="True" result="Success" success="True" time="0.0599" asserts="0" description="Testing Private Function  - NewDiskPartFat32Partition for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewDiskPartFat32Partition for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewLabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.06" asserts="0" description="Testing Private Function  - NewLabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewLabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.06" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewLabSwitch for Standard Processing" executed="True" result="Success" success="True" time="0.0645" asserts="0" description="Testing Private Function  - NewLabSwitch for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewLabSwitch for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0645" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewLabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0659" asserts="0" description="Testing Private Function  - NewLabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewLabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0659" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewLabVMSnapshot for Standard Processing" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="Testing Private Function  - NewLabVMSnapshot for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewLabVMSnapshot for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - NewUnattendXml for Standard Processing" executed="True" result="Success" success="True" time="0.0568" asserts="0" description="Testing Private Function  - NewUnattendXml for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - NewUnattendXml for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveConfigurationData for Standard Processing" executed="True" result="Success" success="True" time="0.0447" asserts="0" description="Testing Private Function  - RemoveConfigurationData for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveConfigurationData for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0447" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveLabSwitch for Standard Processing" executed="True" result="Success" success="True" time="0.0489" asserts="0" description="Testing Private Function  - RemoveLabSwitch for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveLabSwitch for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0489" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveLabVirtualMachine for Standard Processing" executed="True" result="Success" success="True" time="0.059" asserts="0" description="Testing Private Function  - RemoveLabVirtualMachine for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveLabVirtualMachine for Standard Processing.Is valid Powershell (Has no script errors)" time="0.059" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveLabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0602" asserts="0" description="Testing Private Function  - RemoveLabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveLabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0602" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveLabVMDisk for Standard Processing" executed="True" result="Success" success="True" time="0.0471" asserts="0" description="Testing Private Function  - RemoveLabVMDisk for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveLabVMDisk for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0471" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RemoveLabVMSnapshot for Standard Processing" executed="True" result="Success" success="True" time="0.0579" asserts="0" description="Testing Private Function  - RemoveLabVMSnapshot for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RemoveLabVMSnapshot for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - RenameModuleCacheVersion for Standard Processing" executed="True" result="Success" success="True" time="0.0552" asserts="0" description="Testing Private Function  - RenameModuleCacheVersion for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - RenameModuleCacheVersion for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0552" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResetLabVMDisk for Standard Processing" executed="True" result="Success" success="True" time="0.0455" asserts="0" description="Testing Private Function  - ResetLabVMDisk for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResetLabVMDisk for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0455" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveConfigurationDataPath for Standard Processing" executed="True" result="Success" success="True" time="0.0506" asserts="0" description="Testing Private Function  - ResolveConfigurationDataPath for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveConfigurationDataPath for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveCustomBootStrap for Standard Processing" executed="True" result="Success" success="True" time="0.0595" asserts="0" description="Testing Private Function  - ResolveCustomBootStrap for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveCustomBootStrap for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveDismPath for Standard Processing" executed="True" result="Success" success="True" time="0.0662" asserts="0" description="Testing Private Function  - ResolveDismPath for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveDismPath for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0662" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveGitHubModuleUri for Standard Processing" executed="True" result="Success" success="True" time="0.0699" asserts="0" description="Testing Private Function  - ResolveGitHubModuleUri for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveGitHubModuleUri for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0699" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0762" asserts="0" description="Testing Private Function  - ResolveLabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0762" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabModule for Standard Processing" executed="True" result="Success" success="True" time="0.0585" asserts="0" description="Testing Private Function  - ResolveLabModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0585" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabResource for Standard Processing" executed="True" result="Success" success="True" time="0.0545" asserts="0" description="Testing Private Function  - ResolveLabResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabSwitch for Standard Processing" executed="True" result="Success" success="True" time="0.0617" asserts="0" description="Testing Private Function  - ResolveLabSwitch for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabSwitch for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabVMDiskPath for Standard Processing" executed="True" result="Success" success="True" time="0.0658" asserts="0" description="Testing Private Function  - ResolveLabVMDiskPath for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabVMDiskPath for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0658" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveLabVMProperties for Standard Processing" executed="True" result="Success" success="True" time="0.062" asserts="0" description="Testing Private Function  - ResolveLabVMProperties for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveLabVMProperties for Standard Processing.Is valid Powershell (Has no script errors)" time="0.062" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveModule for Standard Processing" executed="True" result="Success" success="True" time="0.0566" asserts="0" description="Testing Private Function  - ResolveModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolvePathEx for Standard Processing" executed="True" result="Success" success="True" time="0.0498" asserts="0" description="Testing Private Function  - ResolvePathEx for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolvePathEx for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0498" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolveProgramFilesFolder for Standard Processing" executed="True" result="Success" success="True" time="0.0536" asserts="0" description="Testing Private Function  - ResolveProgramFilesFolder for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolveProgramFilesFolder for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0536" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ResolvePSGalleryModuleUri for Standard Processing" executed="True" result="Success" success="True" time="0.0601" asserts="0" description="Testing Private Function  - ResolvePSGalleryModuleUri for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ResolvePSGalleryModuleUri for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0601" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetBootStrap for Standard Processing" executed="True" result="Success" success="True" time="0.0628" asserts="0" description="Testing Private Function  - SetBootStrap for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetBootStrap for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0628" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetConfigurationData for Standard Processing" executed="True" result="Success" success="True" time="0.0508" asserts="0" description="Testing Private Function  - SetConfigurationData for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetConfigurationData for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0508" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetDiskImageBootVolume for Standard Processing" executed="True" result="Success" success="True" time="0.0534" asserts="0" description="Testing Private Function  - SetDiskImageBootVolume for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetDiskImageBootVolume for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0534" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetDiskImageBootVolumeGpt for Standard Processing" executed="True" result="Success" success="True" time="0.0559" asserts="0" description="Testing Private Function  - SetDiskImageBootVolumeGpt for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetDiskImageBootVolumeGpt for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0559" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetDiskImageBootVolumeMbr for Standard Processing" executed="True" result="Success" success="True" time="0.0599" asserts="0" description="Testing Private Function  - SetDiskImageBootVolumeMbr for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetDiskImageBootVolumeMbr for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0599" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetDscResource for Standard Processing" executed="True" result="Success" success="True" time="0.0738" asserts="0" description="Testing Private Function  - SetDscResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetDscResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0738" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabSwitch for Standard Processing" executed="True" result="Success" success="True" time="0.0614" asserts="0" description="Testing Private Function  - SetLabSwitch for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabSwitch for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0614" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVirtualMachine for Standard Processing" executed="True" result="Success" success="True" time="0.0593" asserts="0" description="Testing Private Function  - SetLabVirtualMachine for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVirtualMachine for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0593" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDisk for Standard Processing" executed="True" result="Success" success="True" time="0.0511" asserts="0" description="Testing Private Function  - SetLabVMDisk for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDisk for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0511" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFile for Standard Processing" executed="True" result="Success" success="True" time="0.0545" asserts="0" description="Testing Private Function  - SetLabVMDiskFile for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFile for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileBootstrap for Standard Processing" executed="True" result="Success" success="True" time="0.0568" asserts="0" description="Testing Private Function  - SetLabVMDiskFileBootstrap for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileBootstrap for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0568" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileCertificate for Standard Processing" executed="True" result="Success" success="True" time="0.0514" asserts="0" description="Testing Private Function  - SetLabVMDiskFileCertificate for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileCertificate for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileModule for Standard Processing" executed="True" result="Success" success="True" time="0.0555" asserts="0" description="Testing Private Function  - SetLabVMDiskFileModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0555" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileMof for Standard Processing" executed="True" result="Success" success="True" time="0.0595" asserts="0" description="Testing Private Function  - SetLabVMDiskFileMof for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileMof for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0595" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileResource for Standard Processing" executed="True" result="Success" success="True" time="0.058" asserts="0" description="Testing Private Function  - SetLabVMDiskFileResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.058" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskFileUnattendXml for Standard Processing" executed="True" result="Success" success="True" time="0.0709" asserts="0" description="Testing Private Function  - SetLabVMDiskFileUnattendXml for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskFileUnattendXml for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetLabVMDiskModule for Standard Processing" executed="True" result="Success" success="True" time="0.0566" asserts="0" description="Testing Private Function  - SetLabVMDiskModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetLabVMDiskModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetResourceChecksum for Standard Processing" executed="True" result="Success" success="True" time="0.0614" asserts="0" description="Testing Private Function  - SetResourceChecksum for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetResourceChecksum for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0614" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetResourceDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0531" asserts="0" description="Testing Private Function  - SetResourceDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetResourceDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetSetupCompleteCmd for Standard Processing" executed="True" result="Success" success="True" time="0.0554" asserts="0" description="Testing Private Function  - SetSetupCompleteCmd for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetSetupCompleteCmd for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0554" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - SetUnattendXml for Standard Processing" executed="True" result="Success" success="True" time="0.0537" asserts="0" description="Testing Private Function  - SetUnattendXml for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - SetUnattendXml for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestComputerName for Standard Processing" executed="True" result="Success" success="True" time="0.0677" asserts="0" description="Testing Private Function  - TestComputerName for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestComputerName for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0677" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestDscModule for Standard Processing" executed="True" result="Success" success="True" time="0.0676" asserts="0" description="Testing Private Function  - TestDscModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestDscModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0676" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestDscResource for Standard Processing" executed="True" result="Success" success="True" time="0.0582" asserts="0" description="Testing Private Function  - TestDscResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestDscResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestDscResourceModule for Standard Processing" executed="True" result="Success" success="True" time="0.0584" asserts="0" description="Testing Private Function  - TestDscResourceModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestDscResourceModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0584" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestLabConfigurationMof for Standard Processing" executed="True" result="Success" success="True" time="0.0497" asserts="0" description="Testing Private Function  - TestLabConfigurationMof for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestLabConfigurationMof for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0497" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestLabResourceIsLocal for Standard Processing" executed="True" result="Success" success="True" time="0.0477" asserts="0" description="Testing Private Function  - TestLabResourceIsLocal for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestLabResourceIsLocal for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestLabSwitch for Standard Processing" executed="True" result="Success" success="True" time="0.0541" asserts="0" description="Testing Private Function  - TestLabSwitch for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestLabSwitch for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0541" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestLabVirtualMachine for Standard Processing" executed="True" result="Success" success="True" time="0.0537" asserts="0" description="Testing Private Function  - TestLabVirtualMachine for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestLabVirtualMachine for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0537" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestLabVMDisk for Standard Processing" executed="True" result="Success" success="True" time="0.0503" asserts="0" description="Testing Private Function  - TestLabVMDisk for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestLabVMDisk for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0503" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestModule for Standard Processing" executed="True" result="Success" success="True" time="0.0554" asserts="0" description="Testing Private Function  - TestModule for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestModule for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0554" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestModuleCache for Standard Processing" executed="True" result="Success" success="True" time="0.0521" asserts="0" description="Testing Private Function  - TestModuleCache for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestModuleCache for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestModuleVersion for Standard Processing" executed="True" result="Success" success="True" time="0.0585" asserts="0" description="Testing Private Function  - TestModuleVersion for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestModuleVersion for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0585" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - TestResourceDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0492" asserts="0" description="Testing Private Function  - TestResourceDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - TestResourceDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - ValidateTimeZone for Standard Processing" executed="True" result="Success" success="True" time="0.0663" asserts="0" description="Testing Private Function  - ValidateTimeZone for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - ValidateTimeZone for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0663" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - WriteVerbose for Standard Processing" executed="True" result="Success" success="True" time="0.0524" asserts="0" description="Testing Private Function  - WriteVerbose for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - WriteVerbose for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0524" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Private Function  - WriteWarning for Standard Processing" executed="True" result="Success" success="True" time="0.0565" asserts="0" description="Testing Private Function  - WriteWarning for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Private Function  - WriteWarning for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0565" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Checkpoint-Lab for Standard Processing" executed="True" result="Success" success="True" time="0.082" asserts="0" description="Testing Public Function  - Checkpoint-Lab for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Checkpoint-Lab for Standard Processing.Is valid Powershell (Has no script errors)" time="0.082" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Export-LabHostConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0532" asserts="0" description="Testing Public Function  - Export-LabHostConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Export-LabHostConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabHostConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.054" asserts="0" description="Testing Public Function  - Get-LabHostConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabHostConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.054" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabHostDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0629" asserts="0" description="Testing Public Function  - Get-LabHostDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabHostDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabHostDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.054" asserts="0" description="Testing Public Function  - Get-LabHostDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabHostDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.054" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabImage for Standard Processing" executed="True" result="Success" success="True" time="0.0662" asserts="0" description="Testing Public Function  - Get-LabImage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabImage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0662" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0582" asserts="0" description="Testing Public Function  - Get-LabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0582" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0521" asserts="0" description="Testing Public Function  - Get-LabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabVMDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0561" asserts="0" description="Testing Public Function  - Get-LabVMDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabVMDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0561" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Get-LabVMDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.0629" asserts="0" description="Testing Public Function  - Get-LabVMDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Get-LabVMDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Import-LabHostConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0564" asserts="0" description="Testing Public Function  - Import-LabHostConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Import-LabHostConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0564" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Invoke-LabResourceDownload for Standard Processing" executed="True" result="Success" success="True" time="0.0549" asserts="0" description="Testing Public Function  - Invoke-LabResourceDownload for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Invoke-LabResourceDownload for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0549" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - New-LabImage for Standard Processing" executed="True" result="Success" success="True" time="0.0806" asserts="0" description="Testing Public Function  - New-LabImage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - New-LabImage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0806" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - New-LabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0694" asserts="0" description="Testing Public Function  - New-LabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - New-LabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0694" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Register-LabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0719" asserts="0" description="Testing Public Function  - Register-LabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Register-LabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0719" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Remove-LabConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0646" asserts="0" description="Testing Public Function  - Remove-LabConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Remove-LabConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0646" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Remove-LabVM for Standard Processing" executed="True" result="Success" success="True" time="0.068" asserts="0" description="Testing Public Function  - Remove-LabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Remove-LabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.068" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-Lab for Standard Processing" executed="True" result="Success" success="True" time="0.058" asserts="0" description="Testing Public Function  - Reset-Lab for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-Lab for Standard Processing.Is valid Powershell (Has no script errors)" time="0.058" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabHostDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0755" asserts="0" description="Testing Public Function  - Reset-LabHostDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabHostDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0755" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabHostDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.0602" asserts="0" description="Testing Public Function  - Reset-LabHostDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabHostDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0602" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0518" asserts="0" description="Testing Public Function  - Reset-LabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0545" asserts="0" description="Testing Public Function  - Reset-LabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0545" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabVMDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0579" asserts="0" description="Testing Public Function  - Reset-LabVMDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabVMDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Reset-LabVMDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.0609" asserts="0" description="Testing Public Function  - Reset-LabVMDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Reset-LabVMDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0609" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Restore-Lab for Standard Processing" executed="True" result="Success" success="True" time="0.0604" asserts="0" description="Testing Public Function  - Restore-Lab for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Restore-Lab for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0604" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Set-LabHostDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0548" asserts="0" description="Testing Public Function  - Set-LabHostDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Set-LabHostDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Set-LabHostDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.0542" asserts="0" description="Testing Public Function  - Set-LabHostDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Set-LabHostDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0542" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Set-LabVMDefault for Standard Processing" executed="True" result="Success" success="True" time="0.0538" asserts="0" description="Testing Public Function  - Set-LabVMDefault for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Set-LabVMDefault for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0538" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Set-LabVMDefaults for Standard Processing" executed="True" result="Success" success="True" time="0.0557" asserts="0" description="Testing Public Function  - Set-LabVMDefaults for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Set-LabVMDefaults for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Start-Lab for Standard Processing" executed="True" result="Success" success="True" time="0.06" asserts="0" description="Testing Public Function  - Start-Lab for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Start-Lab for Standard Processing.Is valid Powershell (Has no script errors)" time="0.06" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Start-LabConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0692" asserts="0" description="Testing Public Function  - Start-LabConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Start-LabConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0692" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Start-LabHostConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0529" asserts="0" description="Testing Public Function  - Start-LabHostConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Start-LabHostConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0529" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Stop-Lab for Standard Processing" executed="True" result="Success" success="True" time="0.068" asserts="0" description="Testing Public Function  - Stop-Lab for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Stop-Lab for Standard Processing.Is valid Powershell (Has no script errors)" time="0.068" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.063" asserts="0" description="Testing Public Function  - Test-LabConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.063" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabHostConfiguration for Standard Processing" executed="True" result="Success" success="True" time="0.0603" asserts="0" description="Testing Public Function  - Test-LabHostConfiguration for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabHostConfiguration for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0603" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabImage for Standard Processing" executed="True" result="Success" success="True" time="0.0723" asserts="0" description="Testing Public Function  - Test-LabImage for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabImage for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0723" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0533" asserts="0" description="Testing Public Function  - Test-LabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0533" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabResource for Standard Processing" executed="True" result="Success" success="True" time="0.057" asserts="0" description="Testing Public Function  - Test-LabResource for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabResource for Standard Processing.Is valid Powershell (Has no script errors)" time="0.057" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Test-LabVM for Standard Processing" executed="True" result="Success" success="True" time="0.0652" asserts="0" description="Testing Public Function  - Test-LabVM for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Test-LabVM for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0652" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Testing Public Function  - Unregister-LabMedia for Standard Processing" executed="True" result="Success" success="True" time="0.0563" asserts="0" description="Testing Public Function  - Unregister-LabMedia for Standard Processing">
        <results>
          <test-case description="Is valid Powershell (Has no script errors)" name="Testing Public Function  - Unregister-LabMedia for Standard Processing.Is valid Powershell (Has no script errors)" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="ScriptAnalyzer Rule Testing" executed="True" result="Failure" success="False" time="208.9671" asserts="0" description="ScriptAnalyzer Rule Testing">
        <results>
          <test-case description="Passes the Script Analyzer " name="ScriptAnalyzer Rule Testing.Passes the Script Analyzer " time="57.8952" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: {0}
But was:  {3}</message>
              <stack-trace>at line: 81 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Min.Tests.ps1
81:                 (Invoke-ScriptAnalyzer -Path $PublicFunctionPath -Recurse ).Count | Should Be 0
</stack-trace>
            </failure>
          </test-case>
          <test-case description="Passes the Script Analyzer " name="ScriptAnalyzer Rule Testing.Passes the Script Analyzer " time="151.0719" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>Expected: {0}
But was:  {6}</message>
              <stack-trace>at line: 89 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Min.Tests.ps1
89:                 (Invoke-ScriptAnalyzer -Path $PrivateFunctionPath ).Count | Should Be 0
</stack-trace>
            </failure>
          </test-case>
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\BootStrap" executed="True" result="Success" success="True" time="3.0639" asserts="0" description="Lib\BootStrap">
        <results>
          <test-case description="Returns a &quot;System.Management.Automation.ScriptBlock&quot; type" name="Lib\BootStrap.Returns a &quot;System.Management.Automation.ScriptBlock&quot; type" time="2.4005" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Includes custom BootStrap injection point" name="Lib\BootStrap.Includes custom BootStrap injection point" time="0.0175" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates target file &quot;SetupComplete.cmd&quot;" name="Lib\BootStrap.Creates target file &quot;SetupComplete.cmd&quot;" time="0.0705" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Bypasses Powershell execution policy" name="Lib\BootStrap.Bypasses Powershell execution policy" time="0.0284" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Runs non-interactively" name="Lib\BootStrap.Runs non-interactively" time="0.0288" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates scheduled tasks for CoreCLR image" name="Lib\BootStrap.Creates scheduled tasks for CoreCLR image" time="0.0329" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses ASCII encoding" name="Lib\BootStrap.Uses ASCII encoding" time="0.076" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates target file &quot;BootStrap.ps1&quot;" name="Lib\BootStrap.Creates target file &quot;BootStrap.ps1&quot;" time="0.0967" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Replaces custom BootStrap injection point with custom BootStrap" name="Lib\BootStrap.Replaces custom BootStrap injection point with custom BootStrap" time="0.0641" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses UTF8 encoding" name="Lib\BootStrap.Uses UTF8 encoding" time="0.0472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns empty string when &quot;CustomBootStrapOrder&quot; = &quot;Disabled&quot;" name="Lib\BootStrap.Returns empty string when &quot;CustomBootStrapOrder&quot; = &quot;Disabled&quot;" time="0.0711" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns configuration bootstrap when &quot;CustomBootStrapOrder&quot; = &quot;ConfigurationOnly&quot;" name="Lib\BootStrap.Returns configuration bootstrap when &quot;CustomBootStrapOrder&quot; = &quot;ConfigurationOnly&quot;" time="0.0222" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns media bootstrap when &quot;CustomBootStrapOrder&quot; = &quot;MediaOnly&quot;" name="Lib\BootStrap.Returns media bootstrap when &quot;CustomBootStrapOrder&quot; = &quot;MediaOnly&quot;" time="0.0254" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns configuration bootstrap first when &quot;CustomBootStrapOrder&quot; = &quot;ConfigurationFirst&quot;" name="Lib\BootStrap.Returns configuration bootstrap first when &quot;CustomBootStrapOrder&quot; = &quot;ConfigurationFirst&quot;" time="0.0141" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns media bootstrap first when &quot;CustomBootStrapOrder&quot; = &quot;MediaFirst&quot;" name="Lib\BootStrap.Returns media bootstrap first when &quot;CustomBootStrapOrder&quot; = &quot;MediaFirst&quot;" time="0.0153" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns configuration bootstrap when &quot;MediaCustomBootstrap&quot; is null" name="Lib\BootStrap.Returns configuration bootstrap when &quot;MediaCustomBootstrap&quot; is null" time="0.0309" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns media bootstrap when &quot;ConfigurationCustomBootstrap&quot; is null" name="Lib\BootStrap.Returns media bootstrap when &quot;ConfigurationCustomBootstrap&quot; is null" time="0.0223" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\ConfigurationData" executed="True" result="Failure" success="False" time="3.4092" asserts="0" description="Lib\ConfigurationData">
        <results>
          <test-case description="Resolves 'Host' to module path when custom configuration does not exist" name="Lib\ConfigurationData.Resolves 'Host' to module path when custom configuration does not exist" time="2.4094" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>parsing "C:\Users\Ryan\Onedrive\Github\kilasuit\Lability" - Unrecognized escape sequence \U.</message>
              <stack-trace>at line: 19 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Tests\Lib\ConfigurationData.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Resolves 'Host' to %ALLUSERSPROFILE% path when custom configuration does exist" name="Lib\ConfigurationData.Resolves 'Host' to %ALLUSERSPROFILE% path when custom configuration does exist" time="0.0365" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves 'VM' to module path when custom configuration does not exist" name="Lib\ConfigurationData.Resolves 'VM' to module path when custom configuration does not exist" time="0.0261" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>parsing "C:\Users\Ryan\Onedrive\Github\kilasuit\Lability" - Unrecognized escape sequence \U.</message>
              <stack-trace>at line: 19 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Tests\Lib\ConfigurationData.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Resolves 'VM' to %ALLUSERSPROFILE% path when custom configuration does exist" name="Lib\ConfigurationData.Resolves 'VM' to %ALLUSERSPROFILE% path when custom configuration does exist" time="0.0451" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves 'Media' to module path when custom configuration does not exist" name="Lib\ConfigurationData.Resolves 'Media' to module path when custom configuration does not exist" time="0.0356" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>parsing "C:\Users\Ryan\Onedrive\Github\kilasuit\Lability" - Unrecognized escape sequence \U.</message>
              <stack-trace>at line: 19 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Tests\Lib\ConfigurationData.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Resolves 'Media' to %ALLUSERSPROFILE% path when custom configuration does exist" name="Lib\ConfigurationData.Resolves 'Media' to %ALLUSERSPROFILE% path when custom configuration does exist" time="0.0339" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves 'CustomMedia' to module path when custom configuration does not exist" name="Lib\ConfigurationData.Resolves 'CustomMedia' to module path when custom configuration does not exist" time="0.0406" asserts="0" success="False" result="Failure" executed="True">
            <failure>
              <message>parsing "C:\Users\Ryan\Onedrive\Github\kilasuit\Lability" - Unrecognized escape sequence \U.</message>
              <stack-trace>at line: 19 in C:\Users\Ryan\Onedrive\Github\kilasuit\Lability\Tests\Lib\ConfigurationData.Tests.ps1</stack-trace>
            </failure>
          </test-case>
          <test-case description="Resolves 'CustomMedia' to %ALLUSERSPROFILE% path when custom configuration does exist" name="Lib\ConfigurationData.Resolves 'CustomMedia' to %ALLUSERSPROFILE% path when custom configuration does exist" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves environment variables in resulting path" name="Lib\ConfigurationData.Resolves environment variables in resulting path" time="0.0586" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;CustomBootstrapOrder&quot; property to VM configuration" name="Lib\ConfigurationData.Adds missing &quot;CustomBootstrapOrder&quot; property to VM configuration" time="0.1674" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;SecureBoot&quot; property to VM configuration" name="Lib\ConfigurationData.Adds missing &quot;SecureBoot&quot; property to VM configuration" time="0.0642" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;GuestIntegrationServices&quot; property to VM configuration" name="Lib\ConfigurationData.Adds missing &quot;GuestIntegrationServices&quot; property to VM configuration" time="0.0547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;OperatingSystem&quot; property to CustomMedia configuration" name="Lib\ConfigurationData.Adds missing &quot;OperatingSystem&quot; property to CustomMedia configuration" time="0.0713" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;DisableLocalFileCaching&quot; property to Host configuration" name="Lib\ConfigurationData.Adds missing &quot;DisableLocalFileCaching&quot; property to Host configuration" time="0.0608" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds missing &quot;EnableCallStackLogging&quot; property to Host configuration" name="Lib\ConfigurationData.Adds missing &quot;EnableCallStackLogging&quot; property to Host configuration" time="0.0725" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes deprecated &quot;UpdatePath&quot; property from Host configuration (Issue #77)" name="Lib\ConfigurationData.Removes deprecated &quot;UpdatePath&quot; property from Host configuration (Issue #77)" time="0.0678" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes configuration file" name="Lib\ConfigurationData.Removes configuration file" time="0.1353" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\DiskImage" executed="True" result="Success" success="True" time="6.3249" asserts="0" description="Lib\DiskImage">
        <results>
          <test-case description="Throws when no disk letter is found" name="Lib\DiskImage.Throws when no disk letter is found" time="2.4118" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when no disk letter is found for specified partition type" name="Lib\DiskImage.Throws when no disk letter is found for specified partition type" time="0.0317" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a single character" name="Lib\DiskImage.Returns a single character" time="0.039" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if VHD image already exists" name="Lib\DiskImage.Throws if VHD image already exists" time="0.0804" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes existing VHD image if it already exists and -Force is specified" name="Lib\DiskImage.Removes existing VHD image if it already exists and -Force is specified" time="0.152" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates new VHD file and initializes disk" name="Lib\DiskImage.Creates new VHD file and initializes disk" time="0.1355" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does dismount VHD file if -PassThru is not specified" name="Lib\DiskImage.Does dismount VHD file if -PassThru is not specified" time="0.1103" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not dismount VHD file if -PassThru is specified" name="Lib\DiskImage.Does not dismount VHD file if -PassThru is specified" time="0.0886" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;BCDBOOT.EXE&quot; with &quot;/f BIOS&quot;" name="Lib\DiskImage.Calls &quot;BCDBOOT.EXE&quot; with &quot;/f BIOS&quot;" time="0.1693" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;BCDEDIT.EXE&quot; thrice" name="Lib\DiskImage.Calls &quot;BCDEDIT.EXE&quot; thrice" time="0.1193" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;BCDBOOT.EXE&quot; with &quot;/f UEFI&quot;" name="Lib\DiskImage.Calls &quot;BCDBOOT.EXE&quot; with &quot;/f UEFI&quot;" time="0.2048" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops Shell Hardware Detection service" name="Lib\DiskImage.Stops Shell Hardware Detection service" time="0.3216" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a full size active IFS partition" name="Lib\DiskImage.Creates a full size active IFS partition" time="0.1468" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Formats volume as NTFS" name="Lib\DiskImage.Formats volume as NTFS" time="0.139" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops and starts Shell Hardware Detection service" name="Lib\DiskImage.Stops and starts Shell Hardware Detection service" time="0.2553" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates 250MB system partition" name="Lib\DiskImage.Creates 250MB system partition" time="0.2257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates OS partition" name="Lib\DiskImage.Creates OS partition" time="0.218" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Formats volume as NTFS" name="Lib\DiskImage.Formats volume as NTFS" time="0.2279" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetDiskImageBootVolumeGpt&quot; when partition style is GPT" name="Lib\DiskImage.Calls &quot;SetDiskImageBootVolumeGpt&quot; when partition style is GPT" time="0.1232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetDiskImageBootVolumeMbr&quot; when partition style is MBR" name="Lib\DiskImage.Calls &quot;SetDiskImageBootVolumeMbr&quot; when partition style is MBR" time="0.0764" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;Add-WindowsPackage&quot; for no hotfixes" name="Lib\DiskImage.Does not call &quot;Add-WindowsPackage&quot; for no hotfixes" time="0.21" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;Add-WindowsPackage&quot; for no hotfixes" name="Lib\DiskImage.Does not call &quot;Add-WindowsPackage&quot; for no hotfixes" time="0.1128" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Add-WindowsPackage&quot; for a single hotfix" name="Lib\DiskImage.Calls &quot;Add-WindowsPackage&quot; for a single hotfix" time="0.1595" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Add-WindowsPackage&quot; for a single hotfix" name="Lib\DiskImage.Calls &quot;Add-WindowsPackage&quot; for a single hotfix" time="0.1483" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Add-WindowsPackage&quot; for each hotfix with multiple hotfixes" name="Lib\DiskImage.Calls &quot;Add-WindowsPackage&quot; for each hotfix with multiple hotfixes" time="0.2175" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Add-WindowsPackage&quot; for each hotfix with multiple hotfixes" name="Lib\DiskImage.Calls &quot;Add-WindowsPackage&quot; for each hotfix with multiple hotfixes" time="0.2006" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\DscModule" executed="True" result="Success" success="True" time="3.9636" asserts="0" description="Lib\DscModule">
        <results>
          <test-case description="Returns true if &quot;GetDscModule&quot; returns a path" name="Lib\DscModule.Returns true if &quot;GetDscModule&quot; returns a path" time="2.7823" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns false if &quot;GetDscModule&quot; fails" name="Lib\DscModule.Returns false if &quot;GetDscModule&quot; fails" time="0.0406" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if module does not exist" name="Lib\DscModule.Throws if module does not exist" time="0.2046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns DSC resource's parent directory path" name="Lib\DscModule.Returns DSC resource's parent directory path" time="0.0754" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns DSC resource's DSCResources subdirectory path if ResourceName is specified" name="Lib\DscModule.Returns DSC resource's DSCResources subdirectory path if ResourceName is specified" time="0.1581" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors if DSC resource's subdirectory path does not exist and ResourceName is specified" name="Lib\DscModule.Errors if DSC resource's subdirectory path does not exist and ResourceName is specified" time="0.1354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns $null if DSC resource's subdirectory path does not exist and ResourceName is specified" name="Lib\DscModule.Returns $null if DSC resource's subdirectory path does not exist and ResourceName is specified" time="0.1056" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw if DSC module version is equal to the MinimumVersion specified" name="Lib\DscModule.Does not throw if DSC module version is equal to the MinimumVersion specified" time="0.1192" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw if DSC module version is greater than the MinimumVersion specified" name="Lib\DscModule.Does not throw if DSC module version is greater than the MinimumVersion specified" time="0.1388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors if DSC module version is less than the MinimumVersion specified" name="Lib\DscModule.Errors if DSC module version is less than the MinimumVersion specified" time="0.1096" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns $null if DSC module version is less than the MinimumVersion specified" name="Lib\DscModule.Returns $null if DSC module version is less than the MinimumVersion specified" time="0.0939" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\DscResource" executed="True" result="Success" success="True" time="4.1699" asserts="0" description="Lib\DscResource">
        <results>
          <test-case description="Does not import module if command is already imported" name="Lib\DscResource.Does not import module if command is already imported" time="3.2303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;GetDscModule&quot; if &quot;UseDefault&quot; is not specified" name="Lib\DscResource.Does not call &quot;GetDscModule&quot; if &quot;UseDefault&quot; is not specified" time="0.0907" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetDscModule&quot; if &quot;UseDefault&quot; is specified" name="Lib\DscResource.Calls &quot;GetDscModule&quot; if &quot;UseDefault&quot; is specified" time="0.0971" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-&lt;ResourceName&gt;TargetResource&quot; method" name="Lib\DscResource.Calls &quot;Get-&lt;ResourceName&gt;TargetResource&quot; method" time="0.1228" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Test-&lt;ResourceName&gt;TargetResource&quot; method" name="Lib\DscResource.Calls &quot;Test-&lt;ResourceName&gt;TargetResource&quot; method" time="0.1777" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Return $false when &quot;Test-&lt;ResourceName&gt;TargetResource&quot; throws (#104)" name="Lib\DscResource.Return $false when &quot;Test-&lt;ResourceName&gt;TargetResource&quot; throws (#104)" time="0.0449" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Set-&lt;ResourceName&gt;TargetResource&quot; method" name="Lib\DscResource.Calls &quot;Set-&lt;ResourceName&gt;TargetResource&quot; method" time="0.1305" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;Set-&lt;ResourceName&gt;TargetResource&quot; if &quot;TestDscResource&quot; passes" name="Lib\DscResource.Does not call &quot;Set-&lt;ResourceName&gt;TargetResource&quot; if &quot;TestDscResource&quot; passes" time="0.1572" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does call &quot;Set-&lt;ResourceName&gt;TargetResource&quot; if &quot;TestDscResource&quot; fails" name="Lib\DscResource.Does call &quot;Set-&lt;ResourceName&gt;TargetResource&quot; if &quot;TestDscResource&quot; fails" time="0.0661" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;TestDscResource&quot; fails and &quot;ResourceName&quot; matches &quot;PendingReboot&quot;" name="Lib\DscResource.Throws when &quot;TestDscResource&quot; fails and &quot;ResourceName&quot; matches &quot;PendingReboot&quot;" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\DscResourceModule" executed="True" result="Success" success="True" time="3.2207" asserts="0" description="Lib\DscResourceModule">
        <results>
          <test-case description="Returns &quot;True&quot; when the module contains a &quot;DSCResources&quot; folder" name="Lib\DscResourceModule.Returns &quot;True&quot; when the module contains a &quot;DSCResources&quot; folder" time="2.6492" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;False&quot; when the module does not contain a &quot;DSCResources&quot; folder" name="Lib\DscResourceModule.Returns &quot;False&quot; when the module does not contain a &quot;DSCResources&quot; folder" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;True&quot; when the module .psm1 contains a &quot;[DSCResource()]&quot; definition" name="Lib\DscResourceModule.Returns &quot;True&quot; when the module .psm1 contains a &quot;[DSCResource()]&quot; definition" time="0.0521" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;False&quot; when the module .psm1 does not contain a &quot;[DSCResource()]&quot; definition" name="Lib\DscResourceModule.Returns &quot;False&quot; when the module .psm1 does not contain a &quot;[DSCResource()]&quot; definition" time="0.0344" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns module with &quot;DSCResources&quot;" name="Lib\DscResourceModule.Returns module with &quot;DSCResources&quot;" time="0.1721" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns module with &quot;[DSCResource()]&quot;" name="Lib\DscResourceModule.Returns module with &quot;[DSCResource()]&quot;" time="0.0621" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return a module without &quot;DSCResources&quot; and &quot;[DSCResource()]&quot;" name="Lib\DscResourceModule.Does not return a module without &quot;DSCResources&quot; and &quot;[DSCResource()]&quot;" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns versioned module with &quot;DSCResources&quot;" name="Lib\DscResourceModule.Returns versioned module with &quot;DSCResources&quot;" time="0.0611" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns versioned module with &quot;[DSCResource()]&quot;" name="Lib\DscResourceModule.Returns versioned module with &quot;[DSCResource()]&quot;" time="0.0712" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return a versioned module without &quot;DSCResources&quot; and &quot;[DSCResource()]&quot;" name="Lib\DscResourceModule.Does not return a versioned module without &quot;DSCResources&quot; and &quot;[DSCResource()]&quot;" time="0.0514" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\Internal" executed="True" result="Success" success="True" time="4.6948" asserts="0" description="Lib\Internal">
        <results>
          <test-case description="Resolves existing home path" name="Lib\Internal.Resolves existing home path" time="2.5537" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves non-existent home path" name="Lib\Internal.Resolves non-existent home path" time="0.0513" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Start-Process&quot; with correct process path" name="Lib\Internal.Calls &quot;Start-Process&quot; with correct process path" time="0.147" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Start-Process&quot; with correct arguments" name="Lib\Internal.Calls &quot;Start-Process&quot; with correct arguments" time="0.0642" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Waits for &quot;Start-Process&quot; to exit" name="Lib\Internal.Waits for &quot;Start-Process&quot; to exit" time="0.0523" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns when process exits with non-zero exit code" name="Lib\Internal.Warns when process exits with non-zero exit code" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$null&quot;" name="Lib\Internal.Does not return call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$null&quot;" time="0.0767" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$false&quot;" name="Lib\Internal.Does not return call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$false&quot;" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$true&quot;" name="Lib\Internal.Returns call stack information when &quot;$labDefaults.CallStackLogging&quot; = &quot;$true&quot;" time="0.022" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetFormattedMessage&quot; method" name="Lib\Internal.Calls &quot;GetFormattedMessage&quot; method" time="0.1089" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Write-Verbose&quot; method with test message" name="Lib\Internal.Calls &quot;Write-Verbose&quot; method with test message" time="0.0592" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetFormattedMessage&quot; method" name="Lib\Internal.Calls &quot;GetFormattedMessage&quot; method" time="0.1283" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Write-Warning&quot; method with test message" name="Lib\Internal.Calls &quot;Write-Warning&quot; method with test message" time="0.0573" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Collections.Hashtable&quot; object" name="Lib\Internal.Returns a &quot;System.Collections.Hashtable&quot; object" time="0.12" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Converts property value types correctly" name="Lib\Internal.Converts property value types correctly" time="0.0294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Ignores &quot;$null&quot; values when specified" name="Lib\Internal.Ignores &quot;$null&quot; values when specified" time="0.0493" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Converts nested &quot;PSCustomObject&quot; types to a hashtable" name="Lib\Internal.Converts nested &quot;PSCustomObject&quot; types to a hashtable" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when computer name does not contain invalid characters" name="Lib\Internal.Passes when computer name does not contain invalid characters" time="0.1164" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '~' character" name="Lib\Internal.Fails when computer name contains invalid '~' character" time="0.0256" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '!' character" name="Lib\Internal.Fails when computer name contains invalid '!' character" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '@' character" name="Lib\Internal.Fails when computer name contains invalid '@' character" time="0.0231" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '#' character" name="Lib\Internal.Fails when computer name contains invalid '#' character" time="0.044" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '$' character" name="Lib\Internal.Fails when computer name contains invalid '$' character" time="0.0195" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '%' character" name="Lib\Internal.Fails when computer name contains invalid '%' character" time="0.0394" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '^' character" name="Lib\Internal.Fails when computer name contains invalid '^' character" time="0.0246" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '&amp;' character" name="Lib\Internal.Fails when computer name contains invalid '&amp;' character" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '*' character" name="Lib\Internal.Fails when computer name contains invalid '*' character" time="0.0204" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '(' character" name="Lib\Internal.Fails when computer name contains invalid '(' character" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ')' character" name="Lib\Internal.Fails when computer name contains invalid ')' character" time="0.0177" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '=' character" name="Lib\Internal.Fails when computer name contains invalid '=' character" time="0.0303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '+' character" name="Lib\Internal.Fails when computer name contains invalid '+' character" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '_' character" name="Lib\Internal.Fails when computer name contains invalid '_' character" time="0.0186" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '[' character" name="Lib\Internal.Fails when computer name contains invalid '[' character" time="0.0375" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ']' character" name="Lib\Internal.Fails when computer name contains invalid ']' character" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '{' character" name="Lib\Internal.Fails when computer name contains invalid '{' character" time="0.0203" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '}' character" name="Lib\Internal.Fails when computer name contains invalid '}' character" time="0.038" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '\' character" name="Lib\Internal.Fails when computer name contains invalid '\' character" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '|' character" name="Lib\Internal.Fails when computer name contains invalid '|' character" time="0.0345" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ';' character" name="Lib\Internal.Fails when computer name contains invalid ';' character" time="0.0282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ':' character" name="Lib\Internal.Fails when computer name contains invalid ':' character" time="0.0247" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '.' character" name="Lib\Internal.Fails when computer name contains invalid '.' character" time="0.0352" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ''' character" name="Lib\Internal.Fails when computer name contains invalid ''' character" time="0.018" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '&quot;' character" name="Lib\Internal.Fails when computer name contains invalid '&quot;' character" time="0.0268" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ',' character" name="Lib\Internal.Fails when computer name contains invalid ',' character" time="0.0229" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '&lt;' character" name="Lib\Internal.Fails when computer name contains invalid '&lt;' character" time="0.0421" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '&gt;' character" name="Lib\Internal.Fails when computer name contains invalid '&gt;' character" time="0.0437" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '/' character" name="Lib\Internal.Fails when computer name contains invalid '/' character" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid '?' character" name="Lib\Internal.Fails when computer name contains invalid '?' character" time="0.0518" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when computer name contains invalid ' ' character" name="Lib\Internal.Fails when computer name contains invalid ' ' character" time="0.0211" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\Iso" executed="True" result="Success" success="True" time="3.0874" asserts="0" description="Lib\Iso">
        <results>
          <test-case description="Mounts ISO image read-only" name="Lib\Iso.Mounts ISO image read-only" time="2.6775" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies ISO image contents to destination path recursively" name="Lib\Iso.Copies ISO image contents to destination path recursively" time="0.2094" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Disounts ISO image" name="Lib\Iso.Disounts ISO image" time="0.2005" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\Module" executed="True" result="Success" success="True" time="7.5297" asserts="0" description="Lib\Module">
        <results>
          <test-case description="Returns all PowerShell modules if no &quot;Name&quot; is specified" name="Lib\Module.Returns all PowerShell modules if no &quot;Name&quot; is specified" time="2.5118" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all PowerShell modules if &quot;*&quot; is specified" name="Lib\Module.Returns all PowerShell modules if &quot;*&quot; is specified" time="0.0215" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all DSC resources if no &quot;Name&quot; is specified" name="Lib\Module.Returns all DSC resources if no &quot;Name&quot; is specified" time="0.0279" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all DSC resources if &quot;*&quot; is specified" name="Lib\Module.Returns all DSC resources if &quot;*&quot; is specified" time="0.041" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns matching PowerShell modules when &quot;Name&quot; is specified" name="Lib\Module.Returns matching PowerShell modules when &quot;Name&quot; is specified" time="0.0502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns matching DSC resources when &quot;Name&quot; is specified" name="Lib\Module.Returns matching DSC resources when &quot;Name&quot; is specified" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns if a PowerShell module cannot be resolved" name="Lib\Module.Warns if a PowerShell module cannot be resolved" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns if a DSC resource cannot be resolved" name="Lib\Module.Warns if a DSC resource cannot be resolved" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if a PowerShell module cannot be resolved and &quot;ThrowIfNotFound&quot; is specified" name="Lib\Module.Throws if a PowerShell module cannot be resolved and &quot;ThrowIfNotFound&quot; is specified" time="0.0262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if a DSC resource cannot be resolved and &quot;ThrowIfNotFound&quot; is specified" name="Lib\Module.Throws if a DSC resource cannot be resolved and &quot;ThrowIfNotFound&quot; is specified" time="0.0532" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns only a single module" name="Lib\Module.Returns only a single module" time="0.1671" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns only a single module by &quot;Module&quot;" name="Lib\Module.Returns only a single module by &quot;Module&quot;" time="0.0846" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the latest PSGallery module version by default" name="Lib\Module.Returns the latest PSGallery module version by default" time="0.0741" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the latest GitHub module version by default" name="Lib\Module.Returns the latest GitHub module version by default" time="0.0598" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the latest PSGallery module version when &quot;MinimumVersion&quot; is specified" name="Lib\Module.Returns the latest PSGallery module version when &quot;MinimumVersion&quot; is specified" time="0.0587" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the latest GitHub module version when &quot;MinimumVersion&quot; is specified" name="Lib\Module.Returns the latest GitHub module version when &quot;MinimumVersion&quot; is specified" time="0.0696" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the exact PSGallery module version when &quot;RequiredVersion&quot; is specified" name="Lib\Module.Returns the exact PSGallery module version when &quot;RequiredVersion&quot; is specified" time="0.067" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the exact GitHub module version when &quot;RequiredVersion&quot; is specified" name="Lib\Module.Returns the exact GitHub module version when &quot;RequiredVersion&quot; is specified" time="0.0813" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return PSGallery module when &quot;MinimumVersion&quot; is not cached" name="Lib\Module.Does not return PSGallery module when &quot;MinimumVersion&quot; is not cached" time="0.0693" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return PSGallery module when &quot;RequiredVersion&quot; is not cached" name="Lib\Module.Does not return PSGallery module when &quot;RequiredVersion&quot; is not cached" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return GitHub module when &quot;MinimumVersion&quot; is not cached" name="Lib\Module.Does not return GitHub module when &quot;MinimumVersion&quot; is not cached" time="0.0643" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return GitHub module when &quot;RequiredVersion&quot; is not cached" name="Lib\Module.Does not return GitHub module when &quot;RequiredVersion&quot; is not cached" time="0.0638" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a FileSystem provider [System.IO.DirectoryInfo] object type" name="Lib\Module.Returns a FileSystem provider [System.IO.DirectoryInfo] object type" time="0.062" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a FileSystem provider [System.IO.FileInfo] object type" name="Lib\Module.Returns a FileSystem provider [System.IO.FileInfo] object type" time="0.0658" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if module &quot;Name&quot; is not specified" name="Lib\Module.Throws if module &quot;Name&quot; is not specified" time="0.0625" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if GitHub module &quot;Owner&quot; is not specified" name="Lib\Module.Throws if GitHub module &quot;Owner&quot; is not specified" time="0.0457" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if FileSystem module &quot;Path&quot; is not specified" name="Lib\Module.Throws if FileSystem module &quot;Path&quot; is not specified" time="0.0473" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if FileSystem module &quot;Path&quot; does not exist" name="Lib\Module.Throws if FileSystem module &quot;Path&quot; does not exist" time="0.0369" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if FileSystem module &quot;Path&quot; is not a &quot;.zip&quot; file" name="Lib\Module.Throws if FileSystem module &quot;Path&quot; is not a &quot;.zip&quot; file" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when module is found" name="Lib\Module.Passes when module is found" time="0.1496" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when module is not found" name="Lib\Module.Fails when module is not found" time="0.0551" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a [System.IO.FileInfo] object type" name="Lib\Module.Returns a [System.IO.FileInfo] object type" time="0.1649" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Renames PSGallery module to &quot;&lt;ModuleName&gt;-v&lt;Version&gt;.zip" name="Lib\Module.Renames PSGallery module to &quot;&lt;ModuleName&gt;-v&lt;Version&gt;.zip" time="0.0441" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Renames GitHub module to &quot;&lt;ModuleName&gt;-v&lt;Version&gt;_&lt;Owner&gt;_&lt;Branch&gt;.zip" name="Lib\Module.Renames GitHub module to &quot;&lt;ModuleName&gt;-v&lt;Version&gt;_&lt;Owner&gt;_&lt;Branch&gt;.zip" time="0.0589" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes existing cached module file" name="Lib\Module.Removes existing cached module file" time="0.1884" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a [System.IO.FileInfo] object type" name="Lib\Module.Returns a [System.IO.FileInfo] object type" time="0.336" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolvePSGalleryModuleUri&quot; with &quot;RequiredVersion&quot; when specified" name="Lib\Module.Calls &quot;ResolvePSGalleryModuleUri&quot; with &quot;RequiredVersion&quot; when specified" time="0.0959" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolvePSGalleryModuleUri&quot; with &quot;MinimumVersion&quot; when specified" name="Lib\Module.Calls &quot;ResolvePSGalleryModuleUri&quot; with &quot;MinimumVersion&quot; when specified" time="0.0944" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a [System.IO.FileInfo] object type" name="Lib\Module.Returns a [System.IO.FileInfo] object type" time="0.2234" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolveGitHubModuleUri&quot; with &quot;Owner&quot; and &quot;Branch&quot;" name="Lib\Module.Calls &quot;ResolveGitHubModuleUri&quot; with &quot;Owner&quot; and &quot;Branch&quot;" time="0.0971" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolveGitHubModuleUri&quot; with &quot;OverrideRepositoryName&quot; when specified" name="Lib\Module.Calls &quot;ResolveGitHubModuleUri&quot; with &quot;OverrideRepositoryName&quot; when specified" time="0.1122" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;Owner&quot; is not specified" name="Lib\Module.Throws when &quot;Owner&quot; is not specified" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns when no &quot;Branch&quot; is specified" name="Lib\Module.Warns when no &quot;Branch&quot; is specified" time="0.1092" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads module from PSGallery when no Provider is specified" name="Lib\Module.Downloads module from PSGallery when no Provider is specified" time="0.2284" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads module from GitHub by ModuleInfo" name="Lib\Module.Downloads module from GitHub by ModuleInfo" time="0.0818" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads module from PSGallery when &quot;PSGallery&quot; Provider is specified" name="Lib\Module.Downloads module from PSGallery when &quot;PSGallery&quot; Provider is specified" time="0.0874" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads module from GitHub when &quot;GitHub&quot; Provider is specified" name="Lib\Module.Downloads module from GitHub when &quot;GitHub&quot; Provider is specified" time="0.1273" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not download module when &quot;FileSystem&quot; Provider is specified" name="Lib\Module.Does not download module when &quot;FileSystem&quot; Provider is specified" time="0.0765" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not download module when resource is cached" name="Lib\Module.Does not download module when resource is cached" time="0.1612" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a [System.IO.DirectoryInfo] object type" name="Lib\Module.Returns a [System.IO.DirectoryInfo] object type" time="0.3118" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Cleans existing module directory when &quot;Clean&quot; is specified" name="Lib\Module.Cleans existing module directory when &quot;Clean&quot; is specified" time="0.0964" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandZipArchive&quot; when &quot;PSGallery&quot; Provider is specified" name="Lib\Module.Calls &quot;ExpandZipArchive&quot; when &quot;PSGallery&quot; Provider is specified" time="0.0694" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandGitHubZipArchive&quot; when &quot;GitHub&quot; Provider is specified" name="Lib\Module.Calls &quot;ExpandGitHubZipArchive&quot; when &quot;GitHub&quot; Provider is specified" time="0.0643" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandGitHubZipArchive&quot; when &quot;GitHub&quot; Provider and &quot;OverrideRepository&quot; are specified" name="Lib\Module.Calls &quot;ExpandGitHubZipArchive&quot; when &quot;GitHub&quot; Provider and &quot;OverrideRepository&quot; are specified" time="0.0752" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandZipArchive&quot; when &quot;FileSystem&quot; Provider is specified and &quot;Path&quot; is a .zip file" name="Lib\Module.Calls &quot;ExpandZipArchive&quot; when &quot;FileSystem&quot; Provider is specified and &quot;Path&quot; is a .zip file" time="0.0822" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Copy-Item&quot; when &quot;FileSystem&quot; Provider is specified and &quot;Path&quot; is a directory" name="Lib\Module.Calls &quot;Copy-Item&quot; when &quot;FileSystem&quot; Provider is specified and &quot;Path&quot; is a directory" time="0.1003" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\Resource" executed="True" result="Success" success="True" time="4.4176" asserts="0" description="Lib\Resource">
        <results>
          <test-case description="Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;Path&quot; already exists" name="Lib\Resource.Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;Path&quot; already exists" time="2.5086" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;Path&quot; does not exist" name="Lib\Resource.Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;Path&quot; does not exist" time="0.0322" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates target &quot;Path&quot; if it does not exist" name="Lib\Resource.Creates target &quot;Path&quot; if it does not exist" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;DirectoryInfo&quot; already exists" name="Lib\Resource.Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;DirectoryInfo&quot; already exists" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;DirectoryInfo&quot; does not exist" name="Lib\Resource.Returns a &quot;System.IO.DirectoryInfo&quot; object if target &quot;DirectoryInfo&quot; does not exist" time="0.0352" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates target &quot;DirectoryInfo&quot; if it does not exist" name="Lib\Resource.Creates target &quot;DirectoryInfo&quot; if it does not exist" time="0.0424" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;System.Collections.Hashtable&quot; type" name="Lib\Resource.Returns &quot;System.Collections.Hashtable&quot; type" time="0.1175" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns empty checksum if resource does not exist" name="Lib\Resource.Returns empty checksum if resource does not exist" time="0.0458" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns correct checksum if resource and checksum files exist" name="Lib\Resource.Returns correct checksum if resource and checksum files exist" time="0.0348" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns correct checksum if resource exists but checksum does not exist" name="Lib\Resource.Returns correct checksum if resource exists but checksum does not exist" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns incorrect checksum if incorrect resource and checksum files exist" name="Lib\Resource.Returns incorrect checksum if incorrect resource and checksum files exist" time="0.052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns incorrect checksum if incorrect resource exists but checksum does not exist" name="Lib\Resource.Returns incorrect checksum if incorrect resource exists but checksum does not exist" time="0.0516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns true if resource exists but no checksum was specified" name="Lib\Resource.Returns true if resource exists but no checksum was specified" time="0.1313" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns true if resource exists and checksum is correct" name="Lib\Resource.Returns true if resource exists and checksum is correct" time="0.0531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns false if resource does not exist" name="Lib\Resource.Returns false if resource does not exist" time="0.0676" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns false if resource exists but checksum is incorrect" name="Lib\Resource.Returns false if resource exists but checksum is incorrect" time="0.0859" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeWebClientDownload&quot; with specified Uri" name="Lib\Resource.Calls &quot;InvokeWebClientDownload&quot; with specified Uri" time="0.1692" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeWebClientDownload&quot; with specified destination Path" name="Lib\Resource.Calls &quot;InvokeWebClientDownload&quot; with specified destination Path" time="0.0843" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeWebClientDownload&quot; with default 64KB buffer size" name="Lib\Resource.Calls &quot;InvokeWebClientDownload&quot; with default 64KB buffer size" time="0.0689" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeWebClientDownload&quot; with 1MB buffer size for file resource" name="Lib\Resource.Calls &quot;InvokeWebClientDownload&quot; with 1MB buffer size for file resource" time="0.067" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates checksum file after download" name="Lib\Resource.Creates checksum file after download" time="0.0839" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates target parent directory if it does not exist" name="Lib\Resource.Creates target parent directory if it does not exist" time="0.1248" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Management.Automation.PSCustomObject&quot; type" name="Lib\Resource.Returns a &quot;System.Management.Automation.PSCustomObject&quot; type" time="0.1799" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; fails" name="Lib\Resource.Calls &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; fails" time="0.0969" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; passes but -Force was specified" name="Lib\Resource.Calls &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; passes but -Force was specified" time="0.1017" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; passes" name="Lib\Resource.Does not call &quot;SetResourceDownload&quot; if &quot;TestResourceDownload&quot; passes" time="0.057" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\UnattendXml" executed="True" result="Success" success="True" time="3.09" asserts="0" description="Lib\UnattendXml">
        <results>
          <test-case description="Returns a &quot;System.Xml.XmlDocument&quot; type" name="Lib\UnattendXml.Returns a &quot;System.Xml.XmlDocument&quot; type" time="2.515" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates equal number of &quot;x86&quot; and &quot;amd64&quot; components" name="Lib\UnattendXml.Creates equal number of &quot;x86&quot; and &quot;amd64&quot; components" time="0.0331" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets encoded Administrator password" name="Lib\UnattendXml.Sets encoded Administrator password" time="0.0439" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets timezone" name="Lib\UnattendXml.Sets timezone" time="0.0354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets Input locale" name="Lib\UnattendXml.Sets Input locale" time="0.0431" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets System locale" name="Lib\UnattendXml.Sets System locale" time="0.0378" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets UI language" name="Lib\UnattendXml.Sets UI language" time="0.0306" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets User locale" name="Lib\UnattendXml.Sets User locale" time="0.0397" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets computer name" name="Lib\UnattendXml.Sets computer name" time="0.0398" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets product key" name="Lib\UnattendXml.Sets product key" time="0.0452" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds single synchronous command" name="Lib\UnattendXml.Adds single synchronous command" time="0.0403" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds multiple synchronous commands" name="Lib\UnattendXml.Adds multiple synchronous commands" time="0.0364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Saves Xml file to disk" name="Lib\UnattendXml.Saves Xml file to disk" time="0.1497" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\VirtualMachine" executed="True" result="Success" success="True" time="5.1505" asserts="0" description="Lib\VirtualMachine">
        <results>
          <test-case description="Returns generation 1 VM for x86 media architecture" name="Lib\VirtualMachine.Returns generation 1 VM for x86 media architecture" time="2.5232" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns generation 2 VM for x64 media architecture" name="Lib\VirtualMachine.Returns generation 2 VM for x64 media architecture" time="0.0783" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns generation 1 VM when custom &quot;MBR&quot; partition style is defined" name="Lib\VirtualMachine.Returns generation 1 VM when custom &quot;MBR&quot; partition style is defined" time="0.0846" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns generation 2 VM when custom &quot;GPT&quot; partition style is defined" name="Lib\VirtualMachine.Returns generation 2 VM when custom &quot;GPT&quot; partition style is defined" time="0.0858" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns generation 1 VM when image generation is &quot;VHD&quot;, but media &quot;x64&quot; and partition style is &quot;GPT&quot;" name="Lib\VirtualMachine.Returns generation 1 VM when image generation is &quot;VHD&quot;, but media &quot;x64&quot; and partition style is &quot;GPT&quot;" time="0.1083" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns additional &quot;VhdPath&quot; property" name="Lib\VirtualMachine.Returns additional &quot;VhdPath&quot; property" time="0.1145" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns additional &quot;RestartIfNeeded&quot; property" name="Lib\VirtualMachine.Returns additional &quot;RestartIfNeeded&quot; property" time="0.0928" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return &quot;Media&quot; property" name="Lib\VirtualMachine.Does not return &quot;Media&quot; property" time="0.0946" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return &quot;EnableGuestService&quot; property by default" name="Lib\VirtualMachine.Does not return &quot;EnableGuestService&quot; property by default" time="0.0983" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;EnableGuestService&quot; property when &quot;GuestIntegrationServices&quot; is specified" name="Lib\VirtualMachine.Returns &quot;EnableGuestService&quot; property when &quot;GuestIntegrationServices&quot; is specified" time="0.0932" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolveLabMedia&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Lib\VirtualMachine.Calls &quot;ResolveLabMedia&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.0813" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Lib\VirtualMachine.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.0841" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return &quot;ConfigurationData&quot; property by default (#97)" name="Lib\VirtualMachine.Does not return &quot;ConfigurationData&quot; property by default (#97)" time="0.0985" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Imports Hyper-V DSC resource" name="Lib\VirtualMachine.Imports Hyper-V DSC resource" time="0.2323" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns true when VM matches specified configuration" name="Lib\VirtualMachine.Returns true when VM matches specified configuration" time="0.1091" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns false when VM does not match specified configuration" name="Lib\VirtualMachine.Returns false when VM does not match specified configuration" time="0.113" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns false when error is thrown" name="Lib\VirtualMachine.Returns false when error is thrown" time="0.131" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Lib\VirtualMachine.Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.0983" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Imports Hyper-V DSC resource" name="Lib\VirtualMachine.Imports Hyper-V DSC resource" time="0.1721" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Invokes Hyper-V DSC resource" name="Lib\VirtualMachine.Invokes Hyper-V DSC resource" time="0.111" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Lib\VirtualMachine.Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.1293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Imports Hyper-V DSC resource" name="Lib\VirtualMachine.Imports Hyper-V DSC resource" time="0.2304" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Invokes Hyper-V DSC resource" name="Lib\VirtualMachine.Invokes Hyper-V DSC resource" time="0.0878" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Lib\VirtualMachine.Calls &quot;GetVirtualMachineProperties&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Lib\WindowsImage" executed="True" result="Success" success="True" time="5.3171" asserts="0" description="Lib\WindowsImage">
        <results>
          <test-case description="Mounts ISO image" name="Lib\WindowsImage.Mounts ISO image" time="2.65" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not Mount WIM image" name="Lib\WindowsImage.Does not Mount WIM image" time="0.0955" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetWindowsImageIndex&quot; method when passing &quot;WimImageName&quot;" name="Lib\WindowsImage.Calls &quot;GetWindowsImageIndex&quot; method when passing &quot;WimImageName&quot;" time="0.2002" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Expand-WindowsImage&quot; with specified &quot;WimImageIndex&quot;" name="Lib\WindowsImage.Calls &quot;Expand-WindowsImage&quot; with specified &quot;WimImageIndex&quot;" time="0.3354" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Expand-WindowsImage&quot; with custom &quot;WimPath&quot;" name="Lib\WindowsImage.Calls &quot;Expand-WindowsImage&quot; with custom &quot;WimPath&quot;" time="0.4051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Dismounts ISO image" name="Lib\WindowsImage.Dismounts ISO image" time="0.2934" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not dismount WIM image" name="Lib\WindowsImage.Does not dismount WIM image" time="0.2148" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;AddWindowsOptionalFeature&quot; when &quot;WindowsOptionalFeature&quot; is defined" name="Lib\WindowsImage.Calls &quot;AddWindowsOptionalFeature&quot; when &quot;WindowsOptionalFeature&quot; is defined" time="0.2411" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;AddWindowsOptionalFeature&quot; with custom &quot;SourcePath&quot;" name="Lib\WindowsImage.Calls &quot;AddWindowsOptionalFeature&quot; with custom &quot;SourcePath&quot;" time="0.135" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Int32&quot; type" name="Lib\WindowsImage.Returns a &quot;System.Int32&quot; type" time="0.1906" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the matching image index if found" name="Lib\WindowsImage.Returns the matching image index if found" time="0.0775" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns nothing when image index is not found" name="Lib\WindowsImage.Returns nothing when image index is not found" time="0.0991" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.String&quot; type" name="Lib\WindowsImage.Returns a &quot;System.String&quot; type" time="0.2124" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns the matching image name" name="Lib\WindowsImage.Returns the matching image name" time="0.0566" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns nothing when image name is not found" name="Lib\WindowsImage.Returns nothing when image name is not found" time="0.1103" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\Lab" executed="True" result="Success" success="True" time="5.8773" asserts="0" description="Src\Lab">
        <results>
          <test-case description="Starts all VMs with matching boot order" name="Src\Lab.Starts all VMs with matching boot order" time="2.5843" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Starts all VMs with differing boot orders individually" name="Src\Lab.Starts all VMs with differing boot orders individually" time="0.1516" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Starts VM using display name" name="Src\Lab.Starts VM using display name" time="0.0836" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Starts VMs in boot order" name="Src\Lab.Starts VMs in boot order" time="0.2747" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;Start-Sleep&quot; if a zero boot delay is specified" name="Src\Lab.Does not call &quot;Start-Sleep&quot; if a zero boot delay is specified" time="0.1524" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops all VMs with matching boot order" name="Src\Lab.Stops all VMs with matching boot order" time="0.2231" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops all VMs with differing boot orders individually" name="Src\Lab.Stops all VMs with differing boot orders individually" time="0.2079" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops VM using display name" name="Src\Lab.Stops VM using display name" time="0.1351" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops VMs in boot order" name="Src\Lab.Stops VMs in boot order" time="0.2335" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Stop-VM&quot; with &quot;Force&quot;" name="Src\Lab.Calls &quot;Stop-VM&quot; with &quot;Force&quot;" time="0.106" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;Start-Sleep&quot; if a zero boot delay is specified" name="Src\Lab.Does not call &quot;Start-Sleep&quot; if a zero boot delay is specified" time="0.1117" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Restore-Lab&quot; with -Force switch" name="Src\Lab.Calls &quot;Restore-Lab&quot; with -Force switch" time="0.152" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Snapshots VMs when powered off" name="Src\Lab.Snapshots VMs when powered off" time="0.2589" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Snapshots VM using display name" name="Src\Lab.Snapshots VM using display name" time="0.0843" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors when there is one running VM" name="Src\Lab.Errors when there is one running VM" time="0.1063" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors when there are multiple running VMs" name="Src\Lab.Errors when there are multiple running VMs" time="0.1176" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Snapshots VMs when there are running VMs and -Force is specified" name="Src\Lab.Snapshots VMs when there are running VMs and -Force is specified" time="0.1298" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Restores specified snapshot when VMs are powered off" name="Src\Lab.Restores specified snapshot when VMs are powered off" time="0.3262" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Restores VM snapshot using display name" name="Src\Lab.Restores VM snapshot using display name" time="0.118" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors when there is a running VM" name="Src\Lab.Errors when there is a running VM" time="0.1345" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Restores specified snapshot when there are running VMs and -Force is specified" name="Src\Lab.Restores specified snapshot when there are running VMs and -Force is specified" time="0.1857" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabConfiguration" executed="True" result="Success" success="True" time="3.7485" asserts="0" description="Src\LabConfiguration">
        <results>
          <test-case description="Calls &quot;Test-LabVM&quot; for each node" name="Src\LabConfiguration.Calls &quot;Test-LabVM&quot; for each node" time="2.6216" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if path is invalid" name="Src\LabConfiguration.Throws if path is invalid" time="0.1152" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw if &quot;.mof&quot; and &quot;.meta.mof&quot; files exist" name="Src\LabConfiguration.Does not throw if &quot;.mof&quot; and &quot;.meta.mof&quot; files exist" time="0.0477" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;.mof&quot; file is missing" name="Src\LabConfiguration.Throws if &quot;.mof&quot; file is missing" time="0.0415" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns if &quot;.meta.mof&quot; file is missing" name="Src\LabConfiguration.Warns if &quot;.meta.mof&quot; file is missing" time="0.046" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns if &quot;.mof&quot; file is missing but -SkipMofCheck is specified" name="Src\LabConfiguration.Warns if &quot;.mof&quot; file is missing but -SkipMofCheck is specified" time="0.0636" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws is &quot;Test-LabHostConfiguration&quot; fails" name="Src\LabConfiguration.Throws is &quot;Test-LabHostConfiguration&quot; fails" time="0.1447" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if path is invalid" name="Src\LabConfiguration.Throws if path is invalid" time="0.073" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;NewLabVM&quot; if node is not configured" name="Src\LabConfiguration.Calls &quot;NewLabVM&quot; if node is not configured" time="0.141" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;NewLabVM&quot; if node is configured" name="Src\LabConfiguration.Does not call &quot;NewLabVM&quot; if node is configured" time="0.122" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;NewLabVM&quot; if node is configured but -Force is specified" name="Src\LabConfiguration.Calls &quot;NewLabVM&quot; if node is configured but -Force is specified" time="0.1383" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;RemoveLabVM&quot; for each node" name="Src\LabConfiguration.Calls &quot;RemoveLabVM&quot; for each node" time="0.1939" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabHostConfiguration" executed="True" result="Success" success="True" time="4.4227" asserts="0" description="Src\LabHostConfiguration">
        <results>
          <test-case description="Installs &quot;Microsoft-Hyper-V-All&quot; feature with &quot;WindowsOptionalFeature&quot; on a desktop OS" name="Src\LabHostConfiguration.Installs &quot;Microsoft-Hyper-V-All&quot; feature with &quot;WindowsOptionalFeature&quot; on a desktop OS" time="2.4178" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Installs &quot;Hyper-V&quot; feature using &quot;WindowsFeature&quot; on a server OS" name="Src\LabHostConfiguration.Installs &quot;Hyper-V&quot; feature using &quot;WindowsFeature&quot; on a server OS" time="0.0572" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Installs &quot;RSAT-Hyper-V-Tools&quot; feature using &quot;WindowsFeature&quot; on a server OS" name="Src\LabHostConfiguration.Installs &quot;RSAT-Hyper-V-Tools&quot; feature using &quot;WindowsFeature&quot; on a server OS" time="0.0478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Checks for a pending reboot" name="Src\LabHostConfiguration.Checks for a pending reboot" time="0.0416" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ImportDscResource once for each host configuration item" name="Src\LabHostConfiguration.Calls &quot;ImportDscResource once for each host configuration item" time="0.2251" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetDscResource once for each host configuration item" name="Src\LabHostConfiguration.Calls &quot;GetDscResource once for each host configuration item" time="0.1216" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when target paths exist" name="Src\LabHostConfiguration.Passes when target paths exist" time="0.4528" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when a target path does not exist" name="Src\LabHostConfiguration.Fails when a target path does not exist" time="0.0617" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when host configuration is correct" name="Src\LabHostConfiguration.Passes when host configuration is correct" time="0.1417" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when host configuration is incorrect" name="Src\LabHostConfiguration.Fails when host configuration is incorrect" time="0.1472" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when host configuration has a pending reboot" name="Src\LabHostConfiguration.Fails when host configuration has a pending reboot" time="0.1412" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when host configuration has a pending reboot but -IgnorePendingReboot is specified" name="Src\LabHostConfiguration.Passes when host configuration has a pending reboot but -IgnorePendingReboot is specified" time="0.1443" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not attempt to create an empty path" name="Src\LabHostConfiguration.Does not attempt to create an empty path" time="0.1599" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;NewDirectory&quot; for each path" name="Src\LabHostConfiguration.Calls &quot;NewDirectory&quot; for each path" time="0.1007" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeDscResource&quot; for each host configuration item" name="Src\LabHostConfiguration.Calls &quot;InvokeDscResource&quot; for each host configuration item" time="0.1621" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabHostDefaults" executed="True" result="Success" success="True" time="4.1138" asserts="0" description="Src\LabHostDefaults">
        <results>
          <test-case description="Calls &quot;GetConfigurationData&quot;" name="Src\LabHostDefaults.Calls &quot;GetConfigurationData&quot;" time="2.6161" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns host configuration path" name="Src\LabHostDefaults.Returns host configuration path" time="0.0905" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Resolves path containing an environment variable" name="Src\LabHostDefaults.Resolves path containing an environment variable" time="0.1325" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'ConfigurationPath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'ConfigurationPath' parameter" time="0.1259" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'DifferencingVhdPath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'DifferencingVhdPath' parameter" time="0.145" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'HotfixPath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'HotfixPath' parameter" time="0.2004" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'IsoPath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'IsoPath' parameter" time="0.1334" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'ParentVhdPath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'ParentVhdPath' parameter" time="0.1474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'ResourcePath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'ResourcePath' parameter" time="0.2151" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls 'Set-LabDefaults' with passed 'ModuleCachePath' parameter" name="Src\LabHostDefaults.Calls 'Set-LabDefaults' with passed 'ModuleCachePath' parameter" time="0.165" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Set-LabDefaults&quot; with passed &quot;ResourceShareName&quot; parameter" name="Src\LabHostDefaults.Calls &quot;Set-LabDefaults&quot; with passed &quot;ResourceShareName&quot; parameter" time="0.0769" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when passed an invalid path" name="Src\LabHostDefaults.Throws when passed an invalid path" time="0.0656" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabImage" executed="True" result="Success" success="True" time="7.798" asserts="0" description="Src\LabImage">
        <results>
          <test-case description="Returns null when there is no parent image when Id specified" name="Src\LabImage.Returns null when there is no parent image when Id specified" time="2.6852" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns null when there is are no parent images" name="Src\LabImage.Returns null when there is are no parent images" time="0.1073" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all available parent images when no Id is specified" name="Src\LabImage.Returns all available parent images when no Id is specified" time="0.136" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a single parent image when Id specified" name="Src\LabImage.Returns a single parent image when Id specified" time="0.1248" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns image generation 'VHD' for VHD file" name="Src\LabImage.Returns image generation 'VHD' for VHD file" time="0.1302" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns image generation 'VHDX' for VHDX file" name="Src\LabImage.Returns image generation 'VHDX' for VHDX file" time="0.1303" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when parent image is found" name="Src\LabImage.Passes when parent image is found" time="0.1585" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when parent image is not found" name="Src\LabImage.Fails when parent image is not found" time="0.0569" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabImage.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.076" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if image already exists" name="Src\LabImage.Throws if image already exists" time="0.1711" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when no &quot;ImageName&quot; is defined (#148)" name="Src\LabImage.Throws when no &quot;ImageName&quot; is defined (#148)" time="0.2474" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Deletes parent VHDX when image creation fails" name="Src\LabImage.Deletes parent VHDX when image creation fails" time="0.2531" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Deletes existing image if it already exists and -Force is specified" name="Src\LabImage.Deletes existing image if it already exists and -Force is specified" time="0.2065" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeLabMediaImageDownload&quot; to download ISO media (if not present)" name="Src\LabImage.Calls &quot;InvokeLabMediaImageDownload&quot; to download ISO media (if not present)" time="0.2085" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;NewDiskImage&quot; with -PassThru to leave VHDX mounted" name="Src\LabImage.Calls &quot;NewDiskImage&quot; with -PassThru to leave VHDX mounted" time="0.2191" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses &quot;GPT&quot; partition style for x64 media" name="Src\LabImage.Uses &quot;GPT&quot; partition style for x64 media" time="0.2072" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses &quot;MBR&quot; partition style for x86 media" name="Src\LabImage.Uses &quot;MBR&quot; partition style for x86 media" time="0.2257" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses custom partition style when specified" name="Src\LabImage.Uses custom partition style when specified" time="0.2183" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandWindowsImage&quot; with the media WIM image name" name="Src\LabImage.Calls &quot;ExpandWindowsImage&quot; with the media WIM image name" time="0.213" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandWindowsImage&quot; with the media WIM image index" name="Src\LabImage.Calls &quot;ExpandWindowsImage&quot; with the media WIM image index" time="0.2582" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandWindowsImage&quot; with &quot;WindowsOptionalFeature&quot;" name="Src\LabImage.Calls &quot;ExpandWindowsImage&quot; with &quot;WindowsOptionalFeature&quot;" time="0.2899" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandWindowsImage&quot; with &quot;WimPath&quot;" name="Src\LabImage.Calls &quot;ExpandWindowsImage&quot; with &quot;WimPath&quot;" time="0.2217" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandWindowsImage&quot; with &quot;SourcePath&quot;" name="Src\LabImage.Calls &quot;ExpandWindowsImage&quot; with &quot;SourcePath&quot;" time="0.2213" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;AddDiskImageHotfix&quot; to inject hotfixes" name="Src\LabImage.Calls &quot;AddDiskImageHotfix&quot; to inject hotfixes" time="0.2361" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetDiskImageBootVolume&quot; to configure boot volume" name="Src\LabImage.Calls &quot;SetDiskImageBootVolume&quot; to configure boot volume" time="0.2503" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Dismounts image" name="Src\LabImage.Dismounts image" time="0.2605" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Test-LabImage&quot; and &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabImage.Calls &quot;Test-LabImage&quot; and &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.285" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabMedia" executed="True" result="Success" success="True" time="5.5535" asserts="0" description="Src\LabMedia">
        <results>
          <test-case description="Does not throw with valid mandatory parameters" name="Src\LabMedia.Does not throw with valid mandatory parameters" time="2.6391" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws with an invalid Uri" name="Src\LabMedia.Throws with an invalid Uri" time="0.0243" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;Id&quot; parameter is missing" name="Src\LabMedia.Throws when &quot;Id&quot; parameter is missing" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;Filename&quot; parameter is missing" name="Src\LabMedia.Throws when &quot;Filename&quot; parameter is missing" time="0.0393" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;Architecture&quot; parameter is missing" name="Src\LabMedia.Throws when &quot;Architecture&quot; parameter is missing" time="0.0193" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;MediaType&quot; parameter is missing" name="Src\LabMedia.Throws when &quot;MediaType&quot; parameter is missing" time="0.0275" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;Uri&quot; parameter is missing" name="Src\LabMedia.Throws when &quot;Uri&quot; parameter is missing" time="0.0255" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;System.Management.Automation.PSCustomObject&quot; object type" name="Src\LabMedia.Returns &quot;System.Management.Automation.PSCustomObject&quot; object type" time="0.0183" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates ProductKey custom entry when &quot;ProductKey&quot; is specified" name="Src\LabMedia.Creates ProductKey custom entry when &quot;ProductKey&quot; is specified" time="0.0393" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if media Id cannot be resolved" name="Src\LabMedia.Throws if media Id cannot be resolved" time="0.1297" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns configuration data media entry if it exists" name="Src\LabMedia.Returns configuration data media entry if it exists" time="0.0202" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns default media if configuration data entry does not exist" name="Src\LabMedia.Returns default media if configuration data entry does not exist" time="0.0681" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all built-in media when no &quot;Id&quot; is specified" name="Src\LabMedia.Returns all built-in media when no &quot;Id&quot; is specified" time="0.137" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a single matching built-in media when &quot;Id&quot; is specified" name="Src\LabMedia.Returns a single matching built-in media when &quot;Id&quot; is specified" time="0.0799" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns null if no built-in media is found when &quot;Id&quot; is specified" name="Src\LabMedia.Returns null if no built-in media is found when &quot;Id&quot; is specified" time="0.0621" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when media ISO has been downloaded" name="Src\LabMedia.Passes when media ISO has been downloaded" time="0.1892" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when media ISO has not been downloaded" name="Src\LabMedia.Fails when media ISO has not been downloaded" time="0.0798" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when media Id is not found" name="Src\LabMedia.Fails when media Id is not found" time="0.064" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.IO.FileInfo&quot; object type" name="Src\LabMedia.Returns a &quot;System.IO.FileInfo&quot; object type" time="0.15" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;ParentVhdPath&quot; if media type is &quot;VHD&quot;" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;ParentVhdPath&quot; if media type is &quot;VHD&quot;" time="0.085" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;IsoPath&quot; if media type is &quot;ISO&quot;" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;IsoPath&quot; if media type is &quot;ISO&quot;" time="0.0816" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;IsoPath&quot; if media type is &quot;WIM&quot;" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;IsoPath&quot; if media type is &quot;WIM&quot;" time="0.0735" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;Force&quot; parameter when specified" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;Force&quot; parameter when specified" time="0.0751" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with large &quot;BufferSize&quot; for file Uris" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with large &quot;BufferSize&quot; for file Uris" time="0.0699" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;InvokeResourceDownload&quot; when &quot;DisableLocalFileCaching&quot; is enabled" name="Src\LabMedia.Does not call &quot;InvokeResourceDownload&quot; when &quot;DisableLocalFileCaching&quot; is enabled" time="0.0896" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns source Uri when &quot;DisableLocalFileCaching&quot; is enabled" name="Src\LabMedia.Returns source Uri when &quot;DisableLocalFileCaching&quot; is enabled" time="0.0921" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.IO.FileInfo&quot; object type" name="Src\LabMedia.Returns a &quot;System.IO.FileInfo&quot; object type" time="0.1663" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;Checksum&quot; parameter when specified" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;Checksum&quot; parameter when specified" time="0.0862" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeResourceDownload&quot; with &quot;Force&quot; parameter when specified" name="Src\LabMedia.Calls &quot;InvokeResourceDownload&quot; with &quot;Force&quot; parameter when specified" time="0.0909" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when custom media type is &quot;ISO&quot; and OperatingSystem is &quot;Linux&quot;" name="Src\LabMedia.Throws when custom media type is &quot;ISO&quot; and OperatingSystem is &quot;Linux&quot;" time="0.1202" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when custom media type is &quot;WIM&quot; and OperatingSystem is &quot;Linux&quot;" name="Src\LabMedia.Throws when custom media type is &quot;WIM&quot; and OperatingSystem is &quot;Linux&quot;" time="0.064" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when custom media type is &quot;ISO&quot; and &quot;ImageName&quot; is not specified" name="Src\LabMedia.Throws when custom media type is &quot;ISO&quot; and &quot;ImageName&quot; is not specified" time="0.0548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when custom media type is &quot;WIM&quot; and &quot;ImageName&quot; is not specified" name="Src\LabMedia.Throws when custom media type is &quot;WIM&quot; and &quot;ImageName&quot; is not specified" time="0.0413" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when custom media already exists and &quot;Force&quot; is not specified" name="Src\LabMedia.Throws when custom media already exists and &quot;Force&quot; is not specified" time="0.0768" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw when custom media type is &quot;VHD&quot; and &quot;ImageName&quot; is not specified" name="Src\LabMedia.Does not throw when custom media type is &quot;VHD&quot; and &quot;ImageName&quot; is not specified" time="0.1215" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw when custom media already exists and &quot;Force&quot; is specified" name="Src\LabMedia.Does not throw when custom media already exists and &quot;Force&quot; is specified" time="0.0825" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes existing custom media entry when 'Id' does exist" name="Src\LabMedia.Removes existing custom media entry when 'Id' does exist" time="0.1883" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not remove any entries when custom media 'Id' doesn't exist" name="Src\LabMedia.Does not remove any entries when custom media 'Id' doesn't exist" time="0.0572" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabModule" executed="True" result="Success" success="True" time="2.6689" asserts="0" description="Src\LabModule">
        <results>
          <test-case description="Returns &quot;System.Collections.Hashtable&quot; object type" name="Src\LabModule.Returns &quot;System.Collections.Hashtable&quot; object type" time="2.4534" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all PowerShell modules when not defined on the node" name="Src\LabModule.Returns all PowerShell modules when not defined on the node" time="0.0506" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all DSC resources when not defined on the node" name="Src\LabModule.Returns all DSC resources when not defined on the node" time="0.0462" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns PowerShell modules only defined on the node" name="Src\LabModule.Returns PowerShell modules only defined on the node" time="0.0579" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns DSC resource modules only defined on the node" name="Src\LabModule.Returns DSC resource modules only defined on the node" time="0.0608" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabResource" executed="True" result="Success" success="True" time="6.9746" asserts="0" description="Src\LabResource">
        <results>
          <test-case description="Passes when no resources are defined in the configuration data" name="Src\LabResource.Passes when no resources are defined in the configuration data" time="2.5782" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when all defined resources are present and &quot;Id&quot; parameter is not specified" name="Src\LabResource.Passes when all defined resources are present and &quot;Id&quot; parameter is not specified" time="0.1282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when defined resource is present and &quot;Id&quot; parameter is specified" name="Src\LabResource.Passes when defined resource is present and &quot;Id&quot; parameter is specified" time="0.0525" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when a resource is missing and &quot;Id&quot; parameter is not specified" name="Src\LabResource.Fails when a resource is missing and &quot;Id&quot; parameter is not specified" time="0.084" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when a resource is missing and &quot;Id&quot; parameter is specified" name="Src\LabResource.Fails when a resource is missing and &quot;Id&quot; parameter is specified" time="0.0906" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses resource &quot;Filename&quot; property if specified" name="Src\LabResource.Uses resource &quot;Filename&quot; property if specified" time="0.0998" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;TestResourceDownload&quot; with &quot;Checksum&quot; parameter when defined" name="Src\LabResource.Calls &quot;TestResourceDownload&quot; with &quot;Checksum&quot; parameter when defined" time="0.1013" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads all media when &quot;MediaId&quot; parameter is not specified" name="Src\LabResource.Downloads all media when &quot;MediaId&quot; parameter is not specified" time="0.5067" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads only unique media when &quot;MediaId&quot; parameter is not specified" name="Src\LabResource.Downloads only unique media when &quot;MediaId&quot; parameter is not specified" time="0.2419" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads single media when &quot;MediaId&quot; parameter is specified" name="Src\LabResource.Downloads single media when &quot;MediaId&quot; parameter is specified" time="0.1624" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads all required hotfixes" name="Src\LabResource.Downloads all required hotfixes" time="0.1088" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads all resources when &quot;ResourceId&quot; parameter is not specified" name="Src\LabResource.Downloads all resources when &quot;ResourceId&quot; parameter is not specified" time="0.194" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads single resource when &quot;ResourceId&quot; parameter is specified" name="Src\LabResource.Downloads single resource when &quot;ResourceId&quot; parameter is specified" time="0.1053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads a single DSC resource module" name="Src\LabResource.Downloads a single DSC resource module" time="0.1154" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads multiple DSC resource modules" name="Src\LabResource.Downloads multiple DSC resource modules" time="0.106" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads a single PowerShell module" name="Src\LabResource.Downloads a single PowerShell module" time="0.1135" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Downloads multiple PowerShell modules" name="Src\LabResource.Downloads multiple PowerShell modules" time="0.0963" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses resource &quot;Filename&quot; property if specified" name="Src\LabResource.Uses resource &quot;Filename&quot; property if specified" time="0.1177" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns resource record if &quot;ResourceId&quot; is found" name="Src\LabResource.Returns resource record if &quot;ResourceId&quot; is found" time="0.0915" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;ResourceId&quot; is not found" name="Src\LabResource.Throws if &quot;ResourceId&quot; is not found" time="0.0446" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates destination &quot;Resources&quot; directory if it does not exist on target file sytem" name="Src\LabResource.Creates destination &quot;Resources&quot; directory if it does not exist on target file sytem" time="0.1569" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Invokes &quot;Invoke-LabResourceDownload&quot; with &quot;ResourceId&quot; if resource is not found" name="Src\LabResource.Invokes &quot;Invoke-LabResourceDownload&quot; with &quot;ResourceId&quot; if resource is not found" time="0.1607" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Uses resource &quot;Filename&quot; property if specified" name="Src\LabResource.Uses resource &quot;Filename&quot; property if specified" time="0.1695" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies resource by default" name="Src\LabResource.Copies resource by default" time="0.158" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies resource to explicit target destination path" name="Src\LabResource.Copies resource to explicit target destination path" time="0.1569" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandZipArchive&quot; if &quot;Expand&quot; property is specified on a &quot;ZIP&quot; resource" name="Src\LabResource.Calls &quot;ExpandZipArchive&quot; if &quot;Expand&quot; property is specified on a &quot;ZIP&quot; resource" time="0.1754" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandZipArchive&quot; to explicit target path when &quot;Expand&quot; is specified on a &quot;ZIP&quot; resource" name="Src\LabResource.Calls &quot;ExpandZipArchive&quot; to explicit target path when &quot;Expand&quot; is specified on a &quot;ZIP&quot; resource" time="0.1308" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandIso&quot; if &quot;Expand&quot; property is specified on an &quot;ISO&quot; resource" name="Src\LabResource.Calls &quot;ExpandIso&quot; if &quot;Expand&quot; property is specified on an &quot;ISO&quot; resource" time="0.1226" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandIso&quot; to explicit target path when &quot;Expand&quot; is specified on a &quot;ISO&quot; resource" name="Src\LabResource.Calls &quot;ExpandIso&quot; to explicit target path when &quot;Expand&quot; is specified on a &quot;ISO&quot; resource" time="0.106" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;Expand&quot; property is specified on an &quot;EXE&quot; resource" name="Src\LabResource.Throws if &quot;Expand&quot; property is specified on an &quot;EXE&quot; resource" time="0.1001" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;System.Boolean&quot; object type" name="Src\LabResource.Returns &quot;System.Boolean&quot; object type" time="0.1294" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when local .EXE exists" name="Src\LabResource.Passes when local .EXE exists" time="0.0434" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when local .EXE does not exist" name="Src\LabResource.Fails when local .EXE does not exist" time="0.0327" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when local ISO folder exists" name="Src\LabResource.Passes when local ISO folder exists" time="0.0442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when local ISO folder does not exist" name="Src\LabResource.Fails when local ISO folder does not exist" time="0.0401" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when local ZIP folder exists" name="Src\LabResource.Passes when local ZIP folder exists" time="0.0347" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when local ZIP folder does not exist" name="Src\LabResource.Fails when local ZIP folder does not exist" time="0.0359" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when local .EXE has &quot;Expand&quot; = &quot;True&quot;" name="Src\LabResource.Throws when local .EXE has &quot;Expand&quot; = &quot;True&quot;" time="0.0387" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabSwitch" executed="True" result="Success" success="True" time="3.8814" asserts="0" description="Src\LabSwitch">
        <results>
          <test-case description="Returns a &quot;System.Collections.Hashtable&quot; object type" name="Src\LabSwitch.Returns a &quot;System.Collections.Hashtable&quot; object type" time="2.4442" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when switch type is &quot;External&quot; and &quot;NetAdapterName&quot; is not specified" name="Src\LabSwitch.Throws when switch type is &quot;External&quot; and &quot;NetAdapterName&quot; is not specified" time="0.0388" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes &quot;NetAdapterName&quot; if switch type is not &quot;External&quot;" name="Src\LabSwitch.Removes &quot;NetAdapterName&quot; if switch type is not &quot;External&quot;" time="0.0383" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes &quot;AllowManagementOS&quot; if switch type is not &quot;External&quot;" name="Src\LabSwitch.Removes &quot;AllowManagementOS&quot; if switch type is not &quot;External&quot;" time="0.0293" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Collections.Hashtable&quot; object type" name="Src\LabSwitch.Returns a &quot;System.Collections.Hashtable&quot; object type" time="0.1502" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns specified network switch from configuration data if defined" name="Src\LabSwitch.Returns specified network switch from configuration data if defined" time="0.0954" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns existing &quot;External&quot; switch if &quot;Name&quot; cannot be resolved" name="Src\LabSwitch.Returns existing &quot;External&quot; switch if &quot;Name&quot; cannot be resolved" time="0.1133" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a default &quot;Internal&quot; switch if the switch cannot be resolved" name="Src\LabSwitch.Returns a default &quot;Internal&quot; switch if the switch cannot be resolved" time="0.0801" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when network switch is found" name="Src\LabSwitch.Passes when network switch is found" time="0.2285" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when an existing switch is found" name="Src\LabSwitch.Passes when an existing switch is found" time="0.0629" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when network switch is not found" name="Src\LabSwitch.Fails when network switch is not found" time="0.1043" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeDscResource&quot;" name="Src\LabSwitch.Calls &quot;InvokeDscResource&quot;" time="0.2071" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;InvokeDscResource&quot; for an existing switch" name="Src\LabSwitch.Does not call &quot;InvokeDscResource&quot; for an existing switch" time="0.0491" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeDscResource&quot; with &quot;Ensure&quot; = &quot;Absent&quot;" name="Src\LabSwitch.Calls &quot;InvokeDscResource&quot; with &quot;Ensure&quot; = &quot;Absent&quot;" time="0.1847" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not call &quot;InvokeDscResource&quot; for an existing switch" name="Src\LabSwitch.Does not call &quot;InvokeDscResource&quot; for an existing switch" time="0.055" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabVM" executed="True" result="Success" success="True" time="10.8998" asserts="0" description="Src\LabVM">
        <results>
          <test-case description="Returns a &quot;System.Collections.Hashtable&quot; object type" name="Src\LabVM.Returns a &quot;System.Collections.Hashtable&quot; object type" time="2.5547" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns node-specific configuration data when present" name="Src\LabVM.Returns node-specific configuration data when present" time="0.0318" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns node-specific configuration data when present and &quot;NoEnumerateWildcardNode&quot; is specified" name="Src\LabVM.Returns node-specific configuration data when present and &quot;NoEnumerateWildcardNode&quot; is specified" time="0.0405" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns wildcard node when node-specific data is not defined" name="Src\LabVM.Returns wildcard node when node-specific data is not defined" time="0.0421" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns default when &quot;NoEnumerateWildcardNode&quot; is specified and node-specific data is not defined" name="Src\LabVM.Returns default when &quot;NoEnumerateWildcardNode&quot; is specified and node-specific data is not defined" time="0.0557" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns default if wildcard and node-specific data is not present" name="Src\LabVM.Returns default if wildcard and node-specific data is not present" time="0.0556" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns &quot;Lability_&quot; specific properties over generic properties" name="Src\LabVM.Returns &quot;Lability_&quot; specific properties over generic properties" time="0.0461" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds &quot;EnvironmentPrefix&quot; to &quot;NodeDisplayName&quot; when defined" name="Src\LabVM.Adds &quot;EnvironmentPrefix&quot; to &quot;NodeDisplayName&quot; when defined" time="0.0464" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Adds &quot;EnvironmentSuffix&quot; to &quot;NodeDisplayName&quot; when defined" name="Src\LabVM.Adds &quot;EnvironmentSuffix&quot; to &quot;NodeDisplayName&quot; when defined" time="0.0706" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Management.Automation.PSCustomObject&quot; object type" name="Src\LabVM.Returns a &quot;System.Management.Automation.PSCustomObject&quot; object type" time="0.2052" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns specific node when &quot;Name&quot; is specified" name="Src\LabVM.Returns specific node when &quot;Name&quot; is specified" time="0.1074" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns all nodes when &quot;Name&quot; is not specified" name="Src\LabVM.Returns all nodes when &quot;Name&quot; is not specified" time="0.1944" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Errors when node cannot be found" name="Src\LabVM.Errors when node cannot be found" time="0.1282" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Boolean&quot; object type" name="Src\LabVM.Returns a &quot;System.Boolean&quot; object type" time="0.2495" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a result for each VM when &quot;Name&quot; is not specified" name="Src\LabVM.Returns a result for each VM when &quot;Name&quot; is not specified" time="0.2024" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes when VM is configured correctly" name="Src\LabVM.Passes when VM is configured correctly" time="0.1173" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when image is invalid" name="Src\LabVM.Fails when image is invalid" time="0.081" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when switch configuration is incorrect" name="Src\LabVM.Fails when switch configuration is incorrect" time="0.149" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when VM disk configuration is invalid" name="Src\LabVM.Fails when VM disk configuration is invalid" time="0.1168" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Fails when VM configuration is incorrect" name="Src\LabVM.Fails when VM configuration is incorrect" time="0.1312" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Test-LabImage&quot; and &quot;TestLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;Test-LabImage&quot; and &quot;TestLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" time="0.1402" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;ClientCertificatePath&quot; cannot be found" name="Src\LabVM.Throws when &quot;ClientCertificatePath&quot; cannot be found" time="0.1193" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw when &quot;ClientCertificatePath&quot; cannot be found and &quot;IsQuickVM&quot; = &quot;$true&quot;" name="Src\LabVM.Does not throw when &quot;ClientCertificatePath&quot; cannot be found and &quot;IsQuickVM&quot; = &quot;$true&quot;" time="0.2355" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when &quot;RootCertificatePath&quot; cannot be found" name="Src\LabVM.Throws when &quot;RootCertificatePath&quot; cannot be found" time="0.0709" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not throw when &quot;RootCertificatePath&quot; cannot be found and &quot;IsQuickVM&quot; = &quot;$true&quot;" name="Src\LabVM.Does not throw when &quot;RootCertificatePath&quot; cannot be found and &quot;IsQuickVM&quot; = &quot;$true&quot;" time="0.3373" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates parent image if it is not already present" name="Src\LabVM.Creates parent image if it is not already present" time="0.3125" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabSwitch&quot; to configure VM switch" name="Src\LabVM.Calls &quot;SetLabSwitch&quot; to configure VM switch" time="0.2478" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabSwitch&quot; once per network switch" name="Src\LabVM.Calls &quot;SetLabSwitch&quot; once per network switch" time="0.2034" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResetLabVMDisk&quot; to create VM disk" name="Src\LabVM.Calls &quot;ResetLabVMDisk&quot; to create VM disk" time="0.2065" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates virtual machine" name="Src\LabVM.Creates virtual machine" time="0.2051" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates virtual machine with &quot;GuestIntegrationServices&quot; when specified" name="Src\LabVM.Creates virtual machine with &quot;GuestIntegrationServices&quot; when specified" time="0.1998" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not inject resources when &quot;OperatingSystem&quot; is &quot;Linux&quot;" name="Src\LabVM.Does not inject resources when &quot;OperatingSystem&quot; is &quot;Linux&quot;" time="0.1897" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Injects VM resources" name="Src\LabVM.Injects VM resources" time="0.197" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes media &quot;ProductKey&quot; when specified (#134)" name="Src\LabVM.Passes media &quot;ProductKey&quot; when specified (#134)" time="0.2181" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not create a snapshot when &quot;NoSnapshot&quot; is specified" name="Src\LabVM.Does not create a snapshot when &quot;NoSnapshot&quot; is specified" time="0.1993" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Writes warning when VM &quot;WarningMessage&quot; is defined" name="Src\LabVM.Writes warning when VM &quot;WarningMessage&quot; is defined" time="0.1901" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Test-LabImage&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;Test-LabImage&quot; with &quot;ConfigurationData&quot; (#97)" time="0.2221" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResetLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;ResetLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" time="0.235" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVirtualMachine&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;SetLabVirtualMachine&quot; with &quot;ConfigurationData&quot; (#97)" time="0.2987" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns when no client or root certificate is used" name="Src\LabVM.Warns when no client or root certificate is used" time="0.0608" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws when VM cannot be found" name="Src\LabVM.Throws when VM cannot be found" time="0.1351" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes all snapshots" name="Src\LabVM.Removes all snapshots" time="0.1821" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes the virtual machine" name="Src\LabVM.Removes the virtual machine" time="0.1608" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes the VHDX file" name="Src\LabVM.Removes the VHDX file" time="0.1635" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not remove the virtual switch by default" name="Src\LabVM.Does not remove the virtual switch by default" time="0.2736" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes the virtual switch when &quot;RemoveSwitch&quot; is specified" name="Src\LabVM.Removes the virtual switch when &quot;RemoveSwitch&quot; is specified" time="0.1784" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;RemoveLabVirtualMachine&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;RemoveLabVirtualMachine&quot; with &quot;ConfigurationData&quot; (#97)" time="0.1574" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;RemoveLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" name="Src\LabVM.Calls &quot;RemoveLabVMDisk&quot; with &quot;ConfigurationData&quot; (#97)" time="0.154" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes existing virtual machine" name="Src\LabVM.Removes existing virtual machine" time="0.1548" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a new virtual machine" name="Src\LabVM.Creates a new virtual machine" time="0.1159" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a new virtual machine without a snapshot when &quot;NoSnapshot&quot; is specified" name="Src\LabVM.Creates a new virtual machine without a snapshot when &quot;NoSnapshot&quot; is specified" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a new virtual machine" name="Src\LabVM.Creates a new virtual machine" time="0.1582" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a new virtual machine without a snapshot when &quot;NoSnapshot&quot; is specified" name="Src\LabVM.Creates a new virtual machine without a snapshot when &quot;NoSnapshot&quot; is specified" time="0.0849" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes existing virtual machine" name="Src\LabVM.Removes existing virtual machine" time="0.1674" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabVMDefaults" executed="True" result="Success" success="True" time="5.046" asserts="0" description="Src\LabVMDefaults">
        <results>
          <test-case description="Calls &quot;RemoveConfigurationData&quot; method" name="Src\LabVMDefaults.Calls &quot;RemoveConfigurationData&quot; method" time="2.624" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Returns a &quot;System.Management.Automation.PSCustomObject&quot; object type" name="Src\LabVMDefaults.Returns a &quot;System.Management.Automation.PSCustomObject&quot; object type" time="0.1235" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return &quot;BootOrder&quot; property" name="Src\LabVMDefaults.Does not return &quot;BootOrder&quot; property" time="0.0526" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Does not return &quot;BootOrder&quot; property" name="Src\LabVMDefaults.Does not return &quot;BootOrder&quot; property" time="0.1638" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;StartupMemory&quot; value" name="Src\LabVMDefaults.Sets &quot;StartupMemory&quot; value" time="0.0813" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;MinimumMemory&quot; value" name="Src\LabVMDefaults.Sets &quot;MinimumMemory&quot; value" time="0.0736" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;MaximumMemory&quot; value" name="Src\LabVMDefaults.Sets &quot;MaximumMemory&quot; value" time="0.0781" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;ProcessorCount&quot; value" name="Src\LabVMDefaults.Sets &quot;ProcessorCount&quot; value" time="0.0728" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;Media&quot; value" name="Src\LabVMDefaults.Sets &quot;Media&quot; value" time="0.1266" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;SwitchName&quot; value" name="Src\LabVMDefaults.Sets &quot;SwitchName&quot; value" time="0.0717" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;Timezone&quot; value" name="Src\LabVMDefaults.Sets &quot;Timezone&quot; value" time="0.0627" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;InputLocale&quot; value" name="Src\LabVMDefaults.Sets &quot;InputLocale&quot; value" time="0.0827" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;InputLocale&quot; value" name="Src\LabVMDefaults.Sets &quot;InputLocale&quot; value" time="0.0695" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;SystemLocale&quot; value" name="Src\LabVMDefaults.Sets &quot;SystemLocale&quot; value" time="0.0723" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;UILanguage&quot; value" name="Src\LabVMDefaults.Sets &quot;UILanguage&quot; value" time="0.0802" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;UserLocale&quot; value" name="Src\LabVMDefaults.Sets &quot;UserLocale&quot; value" time="0.0679" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;RegisteredOwner&quot; value" name="Src\LabVMDefaults.Sets &quot;RegisteredOwner&quot; value" time="0.0734" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;RegisteredOrganization&quot; value" name="Src\LabVMDefaults.Sets &quot;RegisteredOrganization&quot; value" time="0.0804" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;BootDelay&quot; value" name="Src\LabVMDefaults.Sets &quot;BootDelay&quot; value" time="0.074" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;CustomBootstrapOrder&quot; value" name="Src\LabVMDefaults.Sets &quot;CustomBootstrapOrder&quot; value" time="0.0945" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;GuestIntegrationServices&quot; value" name="Src\LabVMDefaults.Sets &quot;GuestIntegrationServices&quot; value" time="0.067" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;ClientCertificatePath&quot; value" name="Src\LabVMDefaults.Sets &quot;ClientCertificatePath&quot; value" time="0.0759" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Sets &quot;RootCertificatePath&quot; value" name="Src\LabVMDefaults.Sets &quot;RootCertificatePath&quot; value" time="0.1286" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;Timezone&quot; cannot be resolved" name="Src\LabVMDefaults.Throws if &quot;Timezone&quot; cannot be resolved" time="0.0563" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;ClientCertificatePath&quot; file cannot be found" name="Src\LabVMDefaults.Throws if &quot;ClientCertificatePath&quot; file cannot be found" time="0.0736" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;RootCertificatePath&quot; file cannot be found" name="Src\LabVMDefaults.Throws if &quot;RootCertificatePath&quot; file cannot be found" time="0.0659" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;StartupMemory&quot; is less than &quot;MinimumMemory&quot;" name="Src\LabVMDefaults.Throws if &quot;StartupMemory&quot; is less than &quot;MinimumMemory&quot;" time="0.0609" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;StartupMemory&quot; is greater than &quot;MaximumMemory&quot;" name="Src\LabVMDefaults.Throws if &quot;StartupMemory&quot; is greater than &quot;MaximumMemory&quot;" time="0.0606" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Throws if &quot;Media&quot; cannot be resolved" name="Src\LabVMDefaults.Throws if &quot;Media&quot; cannot be resolved" time="0.1183" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetConfigurationData&quot; to write data to disk" name="Src\LabVMDefaults.Calls &quot;SetConfigurationData&quot; to write data to disk" time="0.1136" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabVMDisk" executed="True" result="Success" success="True" time="4.9118" asserts="0" description="Src\LabVMDisk">
        <results>
          <test-case description="Appends the VM's name to the host &quot;DifferencingVhdPath&quot;" name="Src\LabVMDisk.Appends the VM's name to the host &quot;DifferencingVhdPath&quot;" time="2.4433" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" name="Src\LabVMDisk.Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" time="0.1822" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;GetDscResource&quot; with virtual machine name" name="Src\LabVMDisk.Calls &quot;GetDscResource&quot; with virtual machine name" time="0.0916" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabVMDisk.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.1017" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" name="Src\LabVMDisk.Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" time="0.2221" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;TestDscResource&quot; with virtual machine name" name="Src\LabVMDisk.Calls &quot;TestDscResource&quot; with virtual machine name" time="0.1187" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;TestDscResource&quot; with &quot;MaximumSize&quot; when image is not available (#104)" name="Src\LabVMDisk.Calls &quot;TestDscResource&quot; with &quot;MaximumSize&quot; when image is not available (#104)" time="0.1334" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;TestDscResource&quot; with &quot;VHDX&quot; when image is not available (#104)" name="Src\LabVMDisk.Calls &quot;TestDscResource&quot; with &quot;VHDX&quot; when image is not available (#104)" time="0.1372" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabVMDisk.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.1239" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" name="Src\LabVMDisk.Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" time="0.1951" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeDscResource&quot; with virtual machine name" name="Src\LabVMDisk.Calls &quot;InvokeDscResource&quot; with virtual machine name" time="0.1308" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabVMDisk.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.1205" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" name="Src\LabVMDisk.Calls &quot;Get-LabMedia&quot; to resolve the parent VHDX path" time="0.1687" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;InvokeDscResource&quot; with virtual &quot;Ensure&quot; = &quot;Absent&quot;" name="Src\LabVMDisk.Calls &quot;InvokeDscResource&quot; with virtual &quot;Ensure&quot; = &quot;Absent&quot;" time="0.1243" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabVMDisk.Calls &quot;Get-LabImage&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.1402" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes any existing snapshots" name="Src\LabVMDisk.Removes any existing snapshots" time="0.1853" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Removes the existing VHDX file" name="Src\LabVMDisk.Removes the existing VHDX file" time="0.0917" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Creates a new VHDX file" name="Src\LabVMDisk.Creates a new VHDX file" time="0.0993" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;RemoveLabVMDisk&quot; and &quot;SetLabVMDisk&quot; with &quot;ConfigurationData&quot; when specified (#97)" name="Src\LabVMDisk.Calls &quot;RemoveLabVMDisk&quot; and &quot;SetLabVMDisk&quot; with &quot;ConfigurationData&quot; when specified (#97)" time="0.102" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabVMDiskFile" executed="True" result="Success" success="True" time="8.8784" asserts="0" description="Src\LabVMDiskFile">
        <results>
          <test-case description="Calls &quot;InvokeModuleCacheDownload&quot; with &quot;Force&quot; when specified" name="Src\LabVMDiskFile.Calls &quot;InvokeModuleCacheDownload&quot; with &quot;Force&quot; when specified" time="2.6481" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandModuleCache&quot; with &quot;Clean&quot; when specified" name="Src\LabVMDiskFile.Calls &quot;ExpandModuleCache&quot; with &quot;Clean&quot; when specified" time="0.0678" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ExpandLabResource&quot; using &quot;ResourceShare&quot; path" name="Src\LabVMDiskFile.Calls &quot;ExpandLabResource&quot; using &quot;ResourceShare&quot; path" time="0.1834" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolveLabModule&quot; to query DSC resource modules" name="Src\LabVMDiskFile.Calls &quot;ResolveLabModule&quot; to query DSC resource modules" time="0.2039" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;ResolveLabModule&quot; to query PowerShell modules" name="Src\LabVMDiskFile.Calls &quot;ResolveLabModule&quot; to query PowerShell modules" time="0.0986" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskModule&quot; to expand modules" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskModule&quot; to expand modules" time="0.1189" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetUnattendXml&quot; to create &quot;\Windows\System32\Sysprep\Unattend.xml&quot; file" name="Src\LabVMDiskFile.Calls &quot;SetUnattendXml&quot; to create &quot;\Windows\System32\Sysprep\Unattend.xml&quot; file" time="0.1849" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes node &quot;ProductKey&quot; when specified (#134)" name="Src\LabVMDiskFile.Passes node &quot;ProductKey&quot; when specified (#134)" time="0.1005" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes media &quot;ProductKey&quot; when specified (#134)" name="Src\LabVMDiskFile.Passes media &quot;ProductKey&quot; when specified (#134)" time="0.0909" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Passes node &quot;ProductKey&quot; when node and media key specified (#134)" name="Src\LabVMDiskFile.Passes node &quot;ProductKey&quot; when node and media key specified (#134)" time="0.1179" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetBootStrap&quot; to inject default bootstrap" name="Src\LabVMDiskFile.Calls &quot;SetBootStrap&quot; to inject default bootstrap" time="0.1364" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetBootStrap&quot; to inject custom bootstrap when specified" name="Src\LabVMDiskFile.Calls &quot;SetBootStrap&quot; to inject custom bootstrap when specified" time="0.0669" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetBootStrap&quot; with &quot;CoreCLR&quot; to inject CoreCLR bootstrap when specified" name="Src\LabVMDiskFile.Calls &quot;SetBootStrap&quot; with &quot;CoreCLR&quot; to inject CoreCLR bootstrap when specified" time="0.092" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetSetupCompleteCmd&quot; with &quot;\Windows\Setup\Scripts&quot; path" name="Src\LabVMDiskFile.Calls &quot;SetSetupCompleteCmd&quot; with &quot;\Windows\Setup\Scripts&quot; path" time="0.0864" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns if .mof file cannot be found" name="Src\LabVMDiskFile.Warns if .mof file cannot be found" time="0.155" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies .mof file if found" name="Src\LabVMDiskFile.Copies .mof file if found" time="0.131" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies .meta.mof file if found" name="Src\LabVMDiskFile.Copies .meta.mof file if found" time="0.104" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies default client certificate" name="Src\LabVMDiskFile.Copies default client certificate" time="0.2084" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies default root certificate" name="Src\LabVMDiskFile.Copies default root certificate" time="0.1053" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies custom client certificate" name="Src\LabVMDiskFile.Copies custom client certificate" time="0.1156" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Copies custom root certificate" name="Src\LabVMDiskFile.Copies custom root certificate" time="0.1353" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Stops &quot;ShellHWDetection&quot; service" name="Src\LabVMDiskFile.Stops &quot;ShellHWDetection&quot; service" time="0.4391" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Mounts virtual machine VHDX file" name="Src\LabVMDiskFile.Mounts virtual machine VHDX file" time="0.2071" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Starts &quot;ShellHWDetection&quot; service" name="Src\LabVMDiskFile.Starts &quot;ShellHWDetection&quot; service" time="0.5509" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileResource&quot; to copy node resources" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileResource&quot; to copy node resources" time="0.831" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileBootstrap&quot; to copy Lability bootstrap" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileBootstrap&quot; to copy Lability bootstrap" time="0.311" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileUnattendXml&quot; to copy unattended installation file" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileUnattendXml&quot; to copy unattended installation file" time="0.2448" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileMof&quot; to copy node DSC configuaration files" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileMof&quot; to copy node DSC configuaration files" time="0.2723" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileCertificate&quot; to copy node certificate files" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileCertificate&quot; to copy node certificate files" time="0.2879" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;SetLabVMDiskFileModule&quot; to copy PowerShell/DSC resource modules" name="Src\LabVMDiskFile.Calls &quot;SetLabVMDiskFileModule&quot; to copy PowerShell/DSC resource modules" time="0.3263" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Dismounts virtual machine VHDX file" name="Src\LabVMDiskFile.Dismounts virtual machine VHDX file" time="0.257" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Src\LabVMSnapshot" executed="True" result="Success" success="True" time="3.1065" asserts="0" description="Src\LabVMSnapshot">
        <results>
          <test-case description="Calls &quot;Get-VMSnapshot&quot; for each virtual machine specified" name="Src\LabVMSnapshot.Calls &quot;Get-VMSnapshot&quot; for each virtual machine specified" time="2.6133" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Remove-VMSnapshot&quot; for each virtual machine snapshot" name="Src\LabVMSnapshot.Calls &quot;Remove-VMSnapshot&quot; for each virtual machine snapshot" time="0.1222" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Checkpoint-VM&quot; for each virtual machine specified" name="Src\LabVMSnapshot.Calls &quot;Checkpoint-VM&quot; for each virtual machine specified" time="0.1588" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Calls &quot;Get-VMSnapshot&quot; for each virtual machine specified" name="Src\LabVMSnapshot.Calls &quot;Get-VMSnapshot&quot; for each virtual machine specified" time="0.1536" asserts="0" success="True" result="Success" executed="True" />
          <test-case description="Warns when snapshot name cannot be found" name="Src\LabVMSnapshot.Warns when snapshot name cannot be found" time="0.0585" asserts="0" success="True" result="Success" executed="True" />
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>